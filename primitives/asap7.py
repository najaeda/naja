
# SPDX-FileCopyrightText: 2024 The Naja authors <https://github.com/najaeda/naja/blob/main/AUTHORS>
#
# SPDX-License-Identifier: Apache-2.0

# This file was generated by an automated script.
# Asap7 primitives for the 7.5 tracks (v28), 6 tracks (v26), and SRAM banks (v0.0) models.
# It contains LVT, RVT, SLVT, and SRAM type cells.

import snl

def srambank_256x4x64_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x64_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 64, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 64, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x20_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x20_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 20, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 20, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def CKINVDCx10_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def A2O1A1Ixp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1Ixp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO211x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO222x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO311x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO311x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO31x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO31x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO321x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO321x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO322x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO322x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AO33x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp17_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp17_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp17_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp17_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp17_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp17_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AOI332xp17_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp17_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp17_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp17_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_256x4x48_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x48_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 48, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 48, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_256x4x40_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x40_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 40, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 40, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def A2O1A1Ixp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp25_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp25_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO31x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO322x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def AOI332xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def DFFASRHQNx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_75t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2p67DC_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2p67DC_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4DC_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4DC_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5p33DC_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5p33DC_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx6p67DC_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx6p67DC_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8DC_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8DC_ASAP7_75t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_75t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def srambank_64x4x36_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x36_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 36, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 36, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def O2A1O1A1Ixp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1A1Ixp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def O2A1O1Ixp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA21x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA221x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA222x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA22x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA311x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA311x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA31x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA31x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA321x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA321x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA322x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA322x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA32x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA32x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA331x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA331x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA332x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OA33x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI211xp67b_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp67b_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5b_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5b_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI221xp33f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OAI31x1f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31x1f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp5f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp5f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI322xp33b_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33b_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp5f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp5f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OAI332xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp5f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp5f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AND2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAxp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAxp33_ASAP7_6t_L")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_6t_L")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x1f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4x3f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4x3f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5x1f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5x1f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR5xp2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x3R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x3R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIxp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIxp5_ASAP7_6t_L")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOxp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOxp5_ASAP7_6t_L")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5r_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5r_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND5xp2R_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2R_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def O2A1O1A1Ixp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1A1Ixp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def O2A1O1Ixp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA21x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA221x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA222x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA22x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA311x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA311x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA31x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA31x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA321x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA321x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA322x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA322x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA32x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA32x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA331x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA331x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA332x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OA33x2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI211xp67b_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp67b_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21xp25_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp25_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5b_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5b_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI221xp33f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22xp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OAI31x1f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31x1f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp5f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp5f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI322xp33b_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33b_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp5f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp5f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OAI332xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp5f_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp5f_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AND2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAxp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAxp33_ASAP7_6t_SRAM")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_6t_SRAM")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x1f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4x3f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4x3f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5x1f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5x1f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR5xp2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x3R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x3R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIxp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIxp5_ASAP7_6t_SRAM")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def XNOR2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5r_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5r_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND5xp2R_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2R_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIELOxp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOxp5_ASAP7_6t_SRAM")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def srambank_128x4x74_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x74_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 74, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 74, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x74_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x74_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 74, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 74, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def BUFx10_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12f_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12f_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16f_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16f_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4f_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4f_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6f_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6f_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx10_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def srambank_256x4x18_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x18_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 18, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 18, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def DFFASRHQNx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_75t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2p67DC_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2p67DC_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4DC_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4DC_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5p33DC_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5p33DC_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx6p67DC_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx6p67DC_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8DC_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8DC_ASAP7_75t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_75t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def O2A1O1A1Ixp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1A1Ixp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def O2A1O1Ixp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA21x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA221x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA222x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA22x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA311x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA311x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA31x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA31x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA321x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA321x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA322x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA322x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA32x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA32x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA331x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA331x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA332x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OA33x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI211xp67b_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp67b_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5b_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5b_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI221xp33f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OAI31x1f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31x1f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp5f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp5f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI322xp33b_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33b_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp5f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp5f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OAI332xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp5f_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp5f_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_256x4x16_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x16_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 16, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 16, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_128x4x64_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x64_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 64, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 64, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def CKINVDCx10_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def srambank_256x4x20_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x20_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 20, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 20, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def DFFARHQNx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFARHQNx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  cell.addInputsToClockArcs([CLK, D, RESETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASHQNx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASHQNx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASRHQNx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_6t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx10_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx10_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx12_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx12_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8_ASAP7_6t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_6t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def srambank_128x4x20_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x20_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 20, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 20, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def BUFx10_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12f_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12f_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16f_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16f_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4f_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4f_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6f_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6f_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx10_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def srambank_64x4x32_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x32_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 32, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 32, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_128x4x72_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x72_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 72, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 72, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def DFFASRHQNx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_75t_SL")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2p67DC_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2p67DC_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4DC_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4DC_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5p33DC_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5p33DC_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx6p67DC_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx6p67DC_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8DC_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8DC_ASAP7_75t_SL")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_75t_SL")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def AND2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAx1_ASAP7_75t_SRAM")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_75t_SRAM")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x1p5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1p5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4xp25_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp75_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp75_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5xp2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x6_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x6_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIx1_ASAP7_75t_SRAM")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOx1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOx1_ASAP7_75t_SRAM")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def A2O1A1Ixp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1Ixp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO211x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO222x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO311x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO311x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO31x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO31x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO321x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO321x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO322x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO322x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AO33x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp17_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp17_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp17_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp17_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp17_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp17_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AOI332xp17_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp17_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp17_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp17_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_256x4x36_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x36_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 36, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 36, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_128x4x80_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x80_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 80, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 80, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x18_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x18_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 18, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 18, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x72_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x72_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 72, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 72, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def O2A1O1Ixp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA31x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  cell.addCombinatorialArcs([A1, A2, A3, B1], [Y])
def OA331x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA331x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA332x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, C1], [Y])
def OAI31xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OAI332xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AND2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAx1_ASAP7_75t_SL")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_75t_SL")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x1p5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1p5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4xp25_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp75_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp75_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5xp2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x6_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x6_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIx1_ASAP7_75t_SL")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOx1_ASAP7_75t_SL")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def DFFARHQNx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFARHQNx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  cell.addInputsToClockArcs([CLK, D, RESETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASHQNx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASHQNx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASRHQNx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_6t_SRAM")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx10_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx10_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx12_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx12_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8_ASAP7_6t_SRAM")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_6t_SRAM")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def A2O1A1Ixp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1Ixp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO211x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO222x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO311x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO311x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO31x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO31x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO321x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO321x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO322x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO322x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AO33x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp17_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp17_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp17_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp17_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp17_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp17_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AOI332xp17_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp17_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp17_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp17_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_256x4x32_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x32_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 32, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 32, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def DFFASRHQNx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_75t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2p67DC_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2p67DC_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4DC_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4DC_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5p33DC_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5p33DC_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx6p67DC_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx6p67DC_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8DC_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8DC_ASAP7_75t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_75t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def srambank_128x4x34_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x34_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 34, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 34, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def DFFARHQNx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFARHQNx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  cell.addInputsToClockArcs([CLK, D, RESETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASHQNx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASHQNx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASRHQNx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_6t_L")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx10_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx10_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx12_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx12_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8_ASAP7_6t_L")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_6t_L")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def srambank_64x4x80_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x80_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 80, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 80, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def A2O1A1Ixp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp25_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp25_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO31x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO322x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def AOI332xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def O2A1O1A1Ixp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1A1Ixp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def O2A1O1Ixp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA21x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA221x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA222x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA22x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA311x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA311x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA311x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OA31x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA31x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OA321x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA321x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA321x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OA322x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA322x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA322x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OA32x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA32x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA32x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OA331x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA331x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OA332x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OA33x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI211xp67b_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp67b_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5b_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5b_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI221xp33f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp33f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def OAI31x1f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31x1f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp5f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp5f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI322xp33b_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33b_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp5f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp5f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def OAI332xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp5f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp5f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def O2A1O1Ixp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA31x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  cell.addCombinatorialArcs([A1, A2, A3, B1], [Y])
def OA331x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA331x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA332x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, C1], [Y])
def OAI31xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OAI332xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_128x4x32_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x32_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 32, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 32, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def AND2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAx1_ASAP7_75t_R")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_75t_R")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x1p5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1p5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4xp25_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp75_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp75_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5xp2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x6_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x6_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIx1_ASAP7_75t_R")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOx1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOx1_ASAP7_75t_R")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def O2A1O1Ixp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA31x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  cell.addCombinatorialArcs([A1, A2, A3, B1], [Y])
def OA331x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA331x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA332x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22x1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22x1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, C1], [Y])
def OAI31xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OAI332xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def BUFx10_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12f_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12f_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16f_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16f_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4f_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4f_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6f_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6f_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx10_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def AND2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAx1_ASAP7_75t_L")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_75t_L")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x1p5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1p5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp67_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp67_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4xp25_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp75_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp75_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5xp2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x6_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x6_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIx1_ASAP7_75t_L")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOx1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOx1_ASAP7_75t_L")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x1_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x1_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_75t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_75t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def srambank_128x4x18_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x18_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 18, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 18, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_256x4x74_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x74_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 74, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 74, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x16_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x16_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 16, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 16, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_128x4x36_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x36_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 36, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 36, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def BUFx10_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12q_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12q_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16q_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16q_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4q_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4q_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6q_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6q_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4x1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4x1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp5_ASAP7_6t_L(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp5_ASAP7_6t_L")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def A2O1A1Ixp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp25_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp25_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO31x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO322x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x2_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22x1_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22x1_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp5_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp5_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def AOI332xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_75t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_75t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_128x4x48_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x48_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 48, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 48, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def A2O1A1Ixp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp25_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp25_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO31x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO322x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def AOI332xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def BUFx10_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12q_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12q_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16q_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16q_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4q_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4q_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6q_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6q_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def DFFARHQNx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFARHQNx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  cell.addInputsToClockArcs([CLK, D, RESETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASHQNx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASHQNx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFASRHQNx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFASRHQNx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  RESETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "RESETN")
  SETN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SETN")
  cell.addInputsToClockArcs([CLK, D, RESETN, SETN], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx2_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQNx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQNx3_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFHQx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFHQx4_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DFFLQNx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx2_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQNx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQNx3_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def DFFLQx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DFFLQx4_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx1_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx2_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DHLx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DHLx3_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx1_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx2_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def DLLx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "DLLx3_ASAP7_6t_R")
  Q = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Q")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addInputsToClockArcs([CLK, D], CLK)
  cell.addClockToOutputsArcs(CLK, [Q])
def ICGx10_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx10_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx12_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx12_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx1_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx2_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx3_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx4_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx5_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def ICGx8_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "ICGx8_ASAP7_6t_R")
  GCLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "GCLK")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  ENA = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "ENA")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  cell.addInputsToClockArcs([CLK, ENA, SE], CLK)
  cell.addClockToOutputsArcs(CLK, [GCLK])
def SDFHx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx2_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx3_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFHx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFHx4_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx1_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx2_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx3_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def SDFLx4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "SDFLx4_ASAP7_6t_R")
  QN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "QN")
  CLK = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CLK")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  SE = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SE")
  SI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "SI")
  cell.addInputsToClockArcs([CLK, D, SE, SI], CLK)
  cell.addClockToOutputsArcs(CLK, [QN])
def srambank_64x4x34_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x34_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 34, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 34, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_256x4x34_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x34_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 34, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 34, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def AND2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAxp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAxp33_ASAP7_6t_R")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_6t_R")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x1f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4x3f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4x3f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp25_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5x1f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5x1f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR5xp2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x3R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x3R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIxp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIxp5_ASAP7_6t_R")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOxp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOxp5_ASAP7_6t_R")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5f_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5f_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5r_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5r_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND5xp2R_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2R_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def O2A1O1Ixp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def O2A1O1Ixp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "O2A1O1Ixp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA211x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA211x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OA21x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA21x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OA221x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA221x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OA222x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA222x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OA22x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA22x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OA31x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA31x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  cell.addCombinatorialArcs([A1, A2, A3, B1], [Y])
def OA331x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA331x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA331x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OA332x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA332x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA332x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OA333x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA333x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA333x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OA33x2_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OA33x2_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def OAI211xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI211xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def OAI21x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI21xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI21xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def OAI221xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI221xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def OAI222xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI222xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def OAI22x1_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22x1_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI22xp5_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI22xp5_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def OAI311xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI311xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, C1], [Y])
def OAI31xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI31xp67_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI31xp67_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def OAI321xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI321xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def OAI322xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI322xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def OAI32xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI32xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def OAI331xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI331xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1], [Y])
def OAI332xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI332xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def OAI333xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI333xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def OAI33xp33_ASAP7_75t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OAI33xp33_ASAP7_75t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def srambank_64x4x64_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x64_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 64, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 64, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def CKINVDCx10_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def srambank_128x4x40_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x40_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 40, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 40, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_64x4x48_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x48_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 48, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 48, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def AND2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND2x6_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND2x6_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def AND3x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND3x4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND3x4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def AND4x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND4x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND4x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def AND5x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def AND5x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AND5x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def FAxp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "FAxp33_ASAP7_6t_SL")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  CI = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "CI")
  cell.addCombinatorialArcs([A, B, CI], [CON, SN])
def HAxp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HAxp5_ASAP7_6t_SL")
  CON = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "CON")
  SN = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "SN")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [CON, SN])
def MAJIxp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJIxp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def MAJx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "MAJx3_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND2x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x1p5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x1p5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND2xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND2xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND3x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND3xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND3xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NAND4xp25R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND4xp75_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND4xp75_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NAND5xp2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR2x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR2xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR2xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NOR3x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x1f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x1f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR3xp33_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR3xp33_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def NOR4x3f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4x3f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR4xp25_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR4xp25_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def NOR5x1f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5x1f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def NOR5xp2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NOR5xp2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x3R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x3R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR2x4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR2x4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def OR3x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR3x4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR3x4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A, B, C], [Y])
def OR4x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR4x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR4x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A, B, C, D], [Y])
def OR5x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def OR5x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "OR5x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def TIEHIxp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIEHIxp5_ASAP7_6t_SL")
  H = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "H")
def TIELOxp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "TIELOxp5_ASAP7_6t_SL")
  L = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "L")
def XNOR2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XNOR2xp5f_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XNOR2xp5f_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2x2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2x2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def XOR2xp5r_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "XOR2xp5r_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A, B], [Y])
def NAND5xp2R_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "NAND5xp2R_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  E = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "E")
  cell.addCombinatorialArcs([A, B, C, D, E], [Y])
def srambank_128x4x16_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_128x4x16_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 16, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 9, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 16, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_256x4x80_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x80_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 80, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 80, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def BUFx10_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12q_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12q_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16q_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16q_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4q_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4q_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6q_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6q_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def srambank_64x4x40_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_64x4x40_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 40, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 8, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 40, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def srambank_256x4x72_6t122(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "srambank_256x4x72_6t122")
  banksel = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "banksel")
  clk = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "clk")
  read = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "read")
  write = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "write")
  wd = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 72, 0, "wd")
  ADDRESS = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Input, 10, 0, "ADDRESS")
  dataout = snl.SNLBusTerm.create(cell, snl.SNLTerm.Direction.Output, 72, 0, "dataout")
  cell.addInputsToClockArcs([banksel, clk, read, write], clk)
def CKINVDCx10_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p5_ASAP7_6t_R(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p5_ASAP7_6t_R")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx10_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12f_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12f_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16f_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16f_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4f_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4f_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6f_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6f_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx10_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx10_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx11_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx11_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx12_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx12_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx14_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx14_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx16_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx16_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx20_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx20_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx5p33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx5p33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx6p67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx6p67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx8_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx8_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def CKINVDCx9p33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "CKINVDCx9p33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4xp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4xp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp33_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp33_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp67_ASAP7_75t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp67_ASAP7_75t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def A2O1A1Ixp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1Ixp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1Ixp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def A2O1A1O1Ixp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "A2O1A1O1Ixp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  D = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "D")
  cell.addCombinatorialArcs([A1, A2, B, C, D], [Y])
def AO211x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO211x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO211x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AO21x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO21x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO21x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AO221x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO221x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO221x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AO222x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO222x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO222x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AO22x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO22x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO22x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AO311x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO311x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO311x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AO31x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO31x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO31x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AO321x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO321x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO321x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AO322x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO322x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO322x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AO32x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO32x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO32x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AO331x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO331x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO331x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AO332x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO332x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO332x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AO333x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO333x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO333x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AO33x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AO33x2_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AO33x2_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def AOI211xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI211xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI211xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B, C], [Y])
def AOI21x1_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21x1_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI21xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI21xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, B], [Y])
def AOI221xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI221xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI221xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C], [Y])
def AOI222xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI222xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, B1, B2, C1, C2], [Y])
def AOI22xp25_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp25_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI22xp5_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI22xp5_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, B1, B2], [Y])
def AOI311xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI311xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B, C], [Y])
def AOI31xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI31xp67_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI31xp67_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B")
  cell.addCombinatorialArcs([A1, A2, A3, B], [Y])
def AOI321xp17_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI321xp17_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C], [Y])
def AOI322xp17_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI322xp17_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, C1, C2], [Y])
def AOI32xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI32xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2], [Y])
def AOI331xp17_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI331xp17_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C], [Y])
def AOI332xp17_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI332xp17_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2], [Y])
def AOI333xp17_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI333xp17_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  C1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C1")
  C2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C2")
  C3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "C3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3, C1, C2, C3], [Y])
def AOI33xp33_ASAP7_6t_SRAM(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "AOI33xp33_ASAP7_6t_SRAM")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A1")
  A2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A2")
  A3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A3")
  B1 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B1")
  B2 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B2")
  B3 = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "B3")
  cell.addCombinatorialArcs([A1, A2, A3, B1, B2, B3], [Y])
def BUFx10_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx10_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx12q_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx12q_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx16q_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx16q_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx24_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx24_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx3_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx4q_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx4q_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx6q_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx6q_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def BUFx8_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "BUFx8_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB1x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB1x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB2x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB2x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB3x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB3x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def HB4x1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "HB4x1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx11_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx11_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx13_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx13_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx1_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx1_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx2_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx2_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx3_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx3_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx4_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx4_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx6_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx6_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVx8_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVx8_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def INVxp5_ASAP7_6t_SL(lib):
  cell = snl.SNLDesign.createPrimitive(lib, "INVxp5_ASAP7_6t_SL")
  Y = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Output, "Y")
  A = snl.SNLScalarTerm.create(cell, snl.SNLTerm.Direction.Input, "A")
  cell.addCombinatorialArcs([A], [Y])
def constructPrimitives(lib):
  srambank_256x4x64_6t122(lib)
  srambank_64x4x20_6t122(lib)
  CKINVDCx10_ASAP7_6t_SL(lib)
  CKINVDCx11_ASAP7_6t_SL(lib)
  CKINVDCx12_ASAP7_6t_SL(lib)
  CKINVDCx14_ASAP7_6t_SL(lib)
  CKINVDCx16_ASAP7_6t_SL(lib)
  CKINVDCx20_ASAP7_6t_SL(lib)
  CKINVDCx5p5_ASAP7_6t_SL(lib)
  CKINVDCx6p5_ASAP7_6t_SL(lib)
  CKINVDCx8_ASAP7_6t_SL(lib)
  CKINVDCx9p5_ASAP7_6t_SL(lib)
  A2O1A1Ixp33_ASAP7_6t_L(lib)
  A2O1A1Ixp5_ASAP7_6t_L(lib)
  A2O1A1O1Ixp33_ASAP7_6t_L(lib)
  AO211x1_ASAP7_6t_L(lib)
  AO211x2_ASAP7_6t_L(lib)
  AO21x1_ASAP7_6t_L(lib)
  AO21x2_ASAP7_6t_L(lib)
  AO221x1_ASAP7_6t_L(lib)
  AO221x2_ASAP7_6t_L(lib)
  AO222x1_ASAP7_6t_L(lib)
  AO222x2_ASAP7_6t_L(lib)
  AO22x1_ASAP7_6t_L(lib)
  AO22x2_ASAP7_6t_L(lib)
  AO311x1_ASAP7_6t_L(lib)
  AO311x2_ASAP7_6t_L(lib)
  AO31x1_ASAP7_6t_L(lib)
  AO31x2_ASAP7_6t_L(lib)
  AO321x1_ASAP7_6t_L(lib)
  AO321x2_ASAP7_6t_L(lib)
  AO322x1_ASAP7_6t_L(lib)
  AO322x2_ASAP7_6t_L(lib)
  AO32x1_ASAP7_6t_L(lib)
  AO32x2_ASAP7_6t_L(lib)
  AO331x1_ASAP7_6t_L(lib)
  AO331x2_ASAP7_6t_L(lib)
  AO332x1_ASAP7_6t_L(lib)
  AO332x2_ASAP7_6t_L(lib)
  AO333x1_ASAP7_6t_L(lib)
  AO333x2_ASAP7_6t_L(lib)
  AO33x1_ASAP7_6t_L(lib)
  AO33x2_ASAP7_6t_L(lib)
  AOI211xp25_ASAP7_6t_L(lib)
  AOI211xp5_ASAP7_6t_L(lib)
  AOI21x1_ASAP7_6t_L(lib)
  AOI21xp25_ASAP7_6t_L(lib)
  AOI21xp5_ASAP7_6t_L(lib)
  AOI221xp25_ASAP7_6t_L(lib)
  AOI221xp5_ASAP7_6t_L(lib)
  AOI222xp25_ASAP7_6t_L(lib)
  AOI22xp25_ASAP7_6t_L(lib)
  AOI22xp5_ASAP7_6t_L(lib)
  AOI311xp33_ASAP7_6t_L(lib)
  AOI31xp33_ASAP7_6t_L(lib)
  AOI31xp67_ASAP7_6t_L(lib)
  AOI321xp17_ASAP7_6t_L(lib)
  AOI322xp17_ASAP7_6t_L(lib)
  AOI32xp33_ASAP7_6t_L(lib)
  AOI331xp17_ASAP7_6t_L(lib)
  AOI332xp17_ASAP7_6t_L(lib)
  AOI333xp17_ASAP7_6t_L(lib)
  AOI33xp33_ASAP7_6t_L(lib)
  srambank_256x4x48_6t122(lib)
  srambank_256x4x40_6t122(lib)
  A2O1A1Ixp33_ASAP7_75t_SL(lib)
  A2O1A1O1Ixp25_ASAP7_75t_SL(lib)
  AO211x2_ASAP7_75t_SL(lib)
  AO21x1_ASAP7_75t_SL(lib)
  AO21x2_ASAP7_75t_SL(lib)
  AO221x1_ASAP7_75t_SL(lib)
  AO221x2_ASAP7_75t_SL(lib)
  AO222x2_ASAP7_75t_SL(lib)
  AO22x1_ASAP7_75t_SL(lib)
  AO22x2_ASAP7_75t_SL(lib)
  AO31x2_ASAP7_75t_SL(lib)
  AO322x2_ASAP7_75t_SL(lib)
  AO32x1_ASAP7_75t_SL(lib)
  AO32x2_ASAP7_75t_SL(lib)
  AO331x1_ASAP7_75t_SL(lib)
  AO331x2_ASAP7_75t_SL(lib)
  AO332x1_ASAP7_75t_SL(lib)
  AO332x2_ASAP7_75t_SL(lib)
  AO333x1_ASAP7_75t_SL(lib)
  AO333x2_ASAP7_75t_SL(lib)
  AO33x2_ASAP7_75t_SL(lib)
  AOI211x1_ASAP7_75t_SL(lib)
  AOI211xp5_ASAP7_75t_SL(lib)
  AOI21x1_ASAP7_75t_SL(lib)
  AOI21xp33_ASAP7_75t_SL(lib)
  AOI21xp5_ASAP7_75t_SL(lib)
  AOI221x1_ASAP7_75t_SL(lib)
  AOI221xp5_ASAP7_75t_SL(lib)
  AOI222xp33_ASAP7_75t_SL(lib)
  AOI22x1_ASAP7_75t_SL(lib)
  AOI22xp33_ASAP7_75t_SL(lib)
  AOI22xp5_ASAP7_75t_SL(lib)
  AOI311xp33_ASAP7_75t_SL(lib)
  AOI31xp33_ASAP7_75t_SL(lib)
  AOI31xp67_ASAP7_75t_SL(lib)
  AOI321xp33_ASAP7_75t_SL(lib)
  AOI322xp5_ASAP7_75t_SL(lib)
  AOI32xp33_ASAP7_75t_SL(lib)
  AOI331xp33_ASAP7_75t_SL(lib)
  AOI332xp33_ASAP7_75t_SL(lib)
  AOI333xp33_ASAP7_75t_SL(lib)
  AOI33xp33_ASAP7_75t_SL(lib)
  DFFASRHQNx1_ASAP7_75t_SRAM(lib)
  DFFHQNx1_ASAP7_75t_SRAM(lib)
  DFFHQNx2_ASAP7_75t_SRAM(lib)
  DFFHQNx3_ASAP7_75t_SRAM(lib)
  DFFHQx4_ASAP7_75t_SRAM(lib)
  DFFLQNx1_ASAP7_75t_SRAM(lib)
  DFFLQNx2_ASAP7_75t_SRAM(lib)
  DFFLQNx3_ASAP7_75t_SRAM(lib)
  DFFLQx4_ASAP7_75t_SRAM(lib)
  DHLx1_ASAP7_75t_SRAM(lib)
  DHLx2_ASAP7_75t_SRAM(lib)
  DHLx3_ASAP7_75t_SRAM(lib)
  DLLx1_ASAP7_75t_SRAM(lib)
  DLLx2_ASAP7_75t_SRAM(lib)
  DLLx3_ASAP7_75t_SRAM(lib)
  ICGx1_ASAP7_75t_SRAM(lib)
  ICGx2_ASAP7_75t_SRAM(lib)
  ICGx2p67DC_ASAP7_75t_SRAM(lib)
  ICGx3_ASAP7_75t_SRAM(lib)
  ICGx4DC_ASAP7_75t_SRAM(lib)
  ICGx4_ASAP7_75t_SRAM(lib)
  ICGx5_ASAP7_75t_SRAM(lib)
  ICGx5p33DC_ASAP7_75t_SRAM(lib)
  ICGx6p67DC_ASAP7_75t_SRAM(lib)
  ICGx8DC_ASAP7_75t_SRAM(lib)
  SDFHx1_ASAP7_75t_SRAM(lib)
  SDFHx2_ASAP7_75t_SRAM(lib)
  SDFHx3_ASAP7_75t_SRAM(lib)
  SDFHx4_ASAP7_75t_SRAM(lib)
  SDFLx1_ASAP7_75t_SRAM(lib)
  SDFLx2_ASAP7_75t_SRAM(lib)
  SDFLx3_ASAP7_75t_SRAM(lib)
  SDFLx4_ASAP7_75t_SRAM(lib)
  srambank_64x4x36_6t122(lib)
  O2A1O1A1Ixp33_ASAP7_6t_SL(lib)
  O2A1O1Ixp33_ASAP7_6t_SL(lib)
  O2A1O1Ixp5_ASAP7_6t_SL(lib)
  OA211x1_ASAP7_6t_SL(lib)
  OA211x2_ASAP7_6t_SL(lib)
  OA21x1_ASAP7_6t_SL(lib)
  OA21x2_ASAP7_6t_SL(lib)
  OA221x1_ASAP7_6t_SL(lib)
  OA221x2_ASAP7_6t_SL(lib)
  OA222x1_ASAP7_6t_SL(lib)
  OA222x2_ASAP7_6t_SL(lib)
  OA22x1_ASAP7_6t_SL(lib)
  OA22x2_ASAP7_6t_SL(lib)
  OA311x1_ASAP7_6t_SL(lib)
  OA311x2_ASAP7_6t_SL(lib)
  OA31x1_ASAP7_6t_SL(lib)
  OA31x2_ASAP7_6t_SL(lib)
  OA321x1_ASAP7_6t_SL(lib)
  OA321x2_ASAP7_6t_SL(lib)
  OA322x1_ASAP7_6t_SL(lib)
  OA322x2_ASAP7_6t_SL(lib)
  OA32x1_ASAP7_6t_SL(lib)
  OA32x2_ASAP7_6t_SL(lib)
  OA331x1_ASAP7_6t_SL(lib)
  OA331x2_ASAP7_6t_SL(lib)
  OA332x1_ASAP7_6t_SL(lib)
  OA332x2_ASAP7_6t_SL(lib)
  OA333x1_ASAP7_6t_SL(lib)
  OA333x2_ASAP7_6t_SL(lib)
  OA33x1_ASAP7_6t_SL(lib)
  OA33x2_ASAP7_6t_SL(lib)
  OAI211xp33_ASAP7_6t_SL(lib)
  OAI211xp67b_ASAP7_6t_SL(lib)
  OAI21xp25_ASAP7_6t_SL(lib)
  OAI21xp5_ASAP7_6t_SL(lib)
  OAI21xp5b_ASAP7_6t_SL(lib)
  OAI221xp33_ASAP7_6t_SL(lib)
  OAI221xp33f_ASAP7_6t_SL(lib)
  OAI222xp33_ASAP7_6t_SL(lib)
  OAI22xp5_ASAP7_6t_SL(lib)
  OAI311xp33_ASAP7_6t_SL(lib)
  OAI31x1f_ASAP7_6t_SL(lib)
  OAI31xp5f_ASAP7_6t_SL(lib)
  OAI321xp33_ASAP7_6t_SL(lib)
  OAI322xp33_ASAP7_6t_SL(lib)
  OAI322xp33b_ASAP7_6t_SL(lib)
  OAI32xp5f_ASAP7_6t_SL(lib)
  OAI331xp33_ASAP7_6t_SL(lib)
  OAI332xp33_ASAP7_6t_SL(lib)
  OAI333xp33_ASAP7_6t_SL(lib)
  OAI33xp5f_ASAP7_6t_SL(lib)
  AND2x2_ASAP7_6t_L(lib)
  AND2x4_ASAP7_6t_L(lib)
  AND2x6_ASAP7_6t_L(lib)
  AND3x1_ASAP7_6t_L(lib)
  AND3x2_ASAP7_6t_L(lib)
  AND3x4_ASAP7_6t_L(lib)
  AND4x1_ASAP7_6t_L(lib)
  AND4x2_ASAP7_6t_L(lib)
  AND5x1_ASAP7_6t_L(lib)
  AND5x2_ASAP7_6t_L(lib)
  FAxp33_ASAP7_6t_L(lib)
  HAxp5_ASAP7_6t_L(lib)
  MAJIxp5_ASAP7_6t_L(lib)
  MAJx1_ASAP7_6t_L(lib)
  MAJx2_ASAP7_6t_L(lib)
  MAJx3_ASAP7_6t_L(lib)
  NAND2x1_ASAP7_6t_L(lib)
  NAND2x1p5_ASAP7_6t_L(lib)
  NAND2x2_ASAP7_6t_L(lib)
  NAND2xp5R_ASAP7_6t_L(lib)
  NAND2xp5_ASAP7_6t_L(lib)
  NAND3x1_ASAP7_6t_L(lib)
  NAND3x2_ASAP7_6t_L(lib)
  NAND3xp33R_ASAP7_6t_L(lib)
  NAND3xp33_ASAP7_6t_L(lib)
  NAND4xp25R_ASAP7_6t_L(lib)
  NAND4xp25_ASAP7_6t_L(lib)
  NAND4xp75_ASAP7_6t_L(lib)
  NAND5xp2_ASAP7_6t_L(lib)
  NOR2x1_ASAP7_6t_L(lib)
  NOR2x2R_ASAP7_6t_L(lib)
  NOR2x2_ASAP7_6t_L(lib)
  NOR2xp5_ASAP7_6t_L(lib)
  NOR3x1_ASAP7_6t_L(lib)
  NOR3x1f_ASAP7_6t_L(lib)
  NOR3x2_ASAP7_6t_L(lib)
  NOR3xp33_ASAP7_6t_L(lib)
  NOR4x3f_ASAP7_6t_L(lib)
  NOR4xp25_ASAP7_6t_L(lib)
  NOR5x1f_ASAP7_6t_L(lib)
  NOR5xp2_ASAP7_6t_L(lib)
  OR2x2_ASAP7_6t_L(lib)
  OR2x3R_ASAP7_6t_L(lib)
  OR2x4_ASAP7_6t_L(lib)
  OR3x1_ASAP7_6t_L(lib)
  OR3x2_ASAP7_6t_L(lib)
  OR3x4_ASAP7_6t_L(lib)
  OR4x1_ASAP7_6t_L(lib)
  OR4x2_ASAP7_6t_L(lib)
  OR5x1_ASAP7_6t_L(lib)
  OR5x2_ASAP7_6t_L(lib)
  TIEHIxp5_ASAP7_6t_L(lib)
  TIELOxp5_ASAP7_6t_L(lib)
  XNOR2x2_ASAP7_6t_L(lib)
  XNOR2xp5_ASAP7_6t_L(lib)
  XNOR2xp5f_ASAP7_6t_L(lib)
  XOR2x2_ASAP7_6t_L(lib)
  XOR2xp5_ASAP7_6t_L(lib)
  XOR2xp5r_ASAP7_6t_L(lib)
  NAND5xp2R_ASAP7_6t_L(lib)
  O2A1O1A1Ixp33_ASAP7_6t_L(lib)
  O2A1O1Ixp33_ASAP7_6t_L(lib)
  O2A1O1Ixp5_ASAP7_6t_L(lib)
  OA211x1_ASAP7_6t_L(lib)
  OA211x2_ASAP7_6t_L(lib)
  OA21x1_ASAP7_6t_L(lib)
  OA21x2_ASAP7_6t_L(lib)
  OA221x1_ASAP7_6t_L(lib)
  OA221x2_ASAP7_6t_L(lib)
  OA222x1_ASAP7_6t_L(lib)
  OA222x2_ASAP7_6t_L(lib)
  OA22x1_ASAP7_6t_L(lib)
  OA22x2_ASAP7_6t_L(lib)
  OA311x1_ASAP7_6t_L(lib)
  OA311x2_ASAP7_6t_L(lib)
  OA31x1_ASAP7_6t_L(lib)
  OA31x2_ASAP7_6t_L(lib)
  OA321x1_ASAP7_6t_L(lib)
  OA321x2_ASAP7_6t_L(lib)
  OA322x1_ASAP7_6t_L(lib)
  OA322x2_ASAP7_6t_L(lib)
  OA32x1_ASAP7_6t_L(lib)
  OA32x2_ASAP7_6t_L(lib)
  OA331x1_ASAP7_6t_L(lib)
  OA331x2_ASAP7_6t_L(lib)
  OA332x1_ASAP7_6t_L(lib)
  OA332x2_ASAP7_6t_L(lib)
  OA333x1_ASAP7_6t_L(lib)
  OA333x2_ASAP7_6t_L(lib)
  OA33x1_ASAP7_6t_L(lib)
  OA33x2_ASAP7_6t_L(lib)
  OAI211xp33_ASAP7_6t_L(lib)
  OAI211xp67b_ASAP7_6t_L(lib)
  OAI21xp25_ASAP7_6t_L(lib)
  OAI21xp5_ASAP7_6t_L(lib)
  OAI21xp5b_ASAP7_6t_L(lib)
  OAI221xp33_ASAP7_6t_L(lib)
  OAI221xp33f_ASAP7_6t_L(lib)
  OAI222xp33_ASAP7_6t_L(lib)
  OAI22xp5_ASAP7_6t_L(lib)
  OAI311xp33_ASAP7_6t_L(lib)
  OAI31x1f_ASAP7_6t_L(lib)
  OAI31xp5f_ASAP7_6t_L(lib)
  OAI321xp33_ASAP7_6t_L(lib)
  OAI322xp33_ASAP7_6t_L(lib)
  OAI322xp33b_ASAP7_6t_L(lib)
  OAI32xp5f_ASAP7_6t_L(lib)
  OAI331xp33_ASAP7_6t_L(lib)
  OAI332xp33_ASAP7_6t_L(lib)
  OAI333xp33_ASAP7_6t_L(lib)
  OAI33xp5f_ASAP7_6t_L(lib)
  AND2x2_ASAP7_6t_SRAM(lib)
  AND2x4_ASAP7_6t_SRAM(lib)
  AND2x6_ASAP7_6t_SRAM(lib)
  AND3x1_ASAP7_6t_SRAM(lib)
  AND3x2_ASAP7_6t_SRAM(lib)
  AND3x4_ASAP7_6t_SRAM(lib)
  AND4x1_ASAP7_6t_SRAM(lib)
  AND4x2_ASAP7_6t_SRAM(lib)
  AND5x1_ASAP7_6t_SRAM(lib)
  AND5x2_ASAP7_6t_SRAM(lib)
  FAxp33_ASAP7_6t_SRAM(lib)
  HAxp5_ASAP7_6t_SRAM(lib)
  MAJIxp5_ASAP7_6t_SRAM(lib)
  MAJx1_ASAP7_6t_SRAM(lib)
  MAJx2_ASAP7_6t_SRAM(lib)
  MAJx3_ASAP7_6t_SRAM(lib)
  NAND2x1_ASAP7_6t_SRAM(lib)
  NAND2x1p5_ASAP7_6t_SRAM(lib)
  NAND2x2_ASAP7_6t_SRAM(lib)
  NAND2xp5R_ASAP7_6t_SRAM(lib)
  NAND2xp5_ASAP7_6t_SRAM(lib)
  NAND3x1_ASAP7_6t_SRAM(lib)
  NAND3x2_ASAP7_6t_SRAM(lib)
  NAND3xp33R_ASAP7_6t_SRAM(lib)
  NAND3xp33_ASAP7_6t_SRAM(lib)
  NAND4xp25R_ASAP7_6t_SRAM(lib)
  NAND4xp25_ASAP7_6t_SRAM(lib)
  NAND4xp75_ASAP7_6t_SRAM(lib)
  NAND5xp2_ASAP7_6t_SRAM(lib)
  NOR2x1_ASAP7_6t_SRAM(lib)
  NOR2x2R_ASAP7_6t_SRAM(lib)
  NOR2x2_ASAP7_6t_SRAM(lib)
  NOR2xp5_ASAP7_6t_SRAM(lib)
  NOR3x1_ASAP7_6t_SRAM(lib)
  NOR3x1f_ASAP7_6t_SRAM(lib)
  NOR3x2_ASAP7_6t_SRAM(lib)
  NOR3xp33_ASAP7_6t_SRAM(lib)
  NOR4x3f_ASAP7_6t_SRAM(lib)
  NOR4xp25_ASAP7_6t_SRAM(lib)
  NOR5x1f_ASAP7_6t_SRAM(lib)
  NOR5xp2_ASAP7_6t_SRAM(lib)
  OR2x2_ASAP7_6t_SRAM(lib)
  OR2x3R_ASAP7_6t_SRAM(lib)
  OR2x4_ASAP7_6t_SRAM(lib)
  OR3x1_ASAP7_6t_SRAM(lib)
  OR3x2_ASAP7_6t_SRAM(lib)
  OR3x4_ASAP7_6t_SRAM(lib)
  OR4x1_ASAP7_6t_SRAM(lib)
  OR4x2_ASAP7_6t_SRAM(lib)
  OR5x1_ASAP7_6t_SRAM(lib)
  OR5x2_ASAP7_6t_SRAM(lib)
  TIEHIxp5_ASAP7_6t_SRAM(lib)
  XNOR2x2_ASAP7_6t_SRAM(lib)
  XNOR2xp5_ASAP7_6t_SRAM(lib)
  XNOR2xp5f_ASAP7_6t_SRAM(lib)
  XOR2x2_ASAP7_6t_SRAM(lib)
  XOR2xp5_ASAP7_6t_SRAM(lib)
  XOR2xp5r_ASAP7_6t_SRAM(lib)
  NAND5xp2R_ASAP7_6t_SRAM(lib)
  TIELOxp5_ASAP7_6t_SRAM(lib)
  srambank_128x4x74_6t122(lib)
  srambank_64x4x74_6t122(lib)
  BUFx10_ASAP7_75t_SRAM(lib)
  BUFx12_ASAP7_75t_SRAM(lib)
  BUFx12f_ASAP7_75t_SRAM(lib)
  BUFx16f_ASAP7_75t_SRAM(lib)
  BUFx24_ASAP7_75t_SRAM(lib)
  BUFx2_ASAP7_75t_SRAM(lib)
  BUFx3_ASAP7_75t_SRAM(lib)
  BUFx4_ASAP7_75t_SRAM(lib)
  BUFx4f_ASAP7_75t_SRAM(lib)
  BUFx5_ASAP7_75t_SRAM(lib)
  BUFx6f_ASAP7_75t_SRAM(lib)
  BUFx8_ASAP7_75t_SRAM(lib)
  CKINVDCx10_ASAP7_75t_SRAM(lib)
  CKINVDCx11_ASAP7_75t_SRAM(lib)
  CKINVDCx12_ASAP7_75t_SRAM(lib)
  CKINVDCx14_ASAP7_75t_SRAM(lib)
  CKINVDCx16_ASAP7_75t_SRAM(lib)
  CKINVDCx20_ASAP7_75t_SRAM(lib)
  CKINVDCx5p33_ASAP7_75t_SRAM(lib)
  CKINVDCx6p67_ASAP7_75t_SRAM(lib)
  CKINVDCx8_ASAP7_75t_SRAM(lib)
  CKINVDCx9p33_ASAP7_75t_SRAM(lib)
  HB1xp67_ASAP7_75t_SRAM(lib)
  HB2xp67_ASAP7_75t_SRAM(lib)
  HB3xp67_ASAP7_75t_SRAM(lib)
  HB4xp67_ASAP7_75t_SRAM(lib)
  INVx11_ASAP7_75t_SRAM(lib)
  INVx13_ASAP7_75t_SRAM(lib)
  INVx1_ASAP7_75t_SRAM(lib)
  INVx2_ASAP7_75t_SRAM(lib)
  INVx3_ASAP7_75t_SRAM(lib)
  INVx4_ASAP7_75t_SRAM(lib)
  INVx5_ASAP7_75t_SRAM(lib)
  INVx6_ASAP7_75t_SRAM(lib)
  INVx8_ASAP7_75t_SRAM(lib)
  INVxp33_ASAP7_75t_SRAM(lib)
  INVxp67_ASAP7_75t_SRAM(lib)
  srambank_256x4x18_6t122(lib)
  DFFASRHQNx1_ASAP7_75t_L(lib)
  DFFHQNx1_ASAP7_75t_L(lib)
  DFFHQNx2_ASAP7_75t_L(lib)
  DFFHQNx3_ASAP7_75t_L(lib)
  DFFHQx4_ASAP7_75t_L(lib)
  DFFLQNx1_ASAP7_75t_L(lib)
  DFFLQNx2_ASAP7_75t_L(lib)
  DFFLQNx3_ASAP7_75t_L(lib)
  DFFLQx4_ASAP7_75t_L(lib)
  DHLx1_ASAP7_75t_L(lib)
  DHLx2_ASAP7_75t_L(lib)
  DHLx3_ASAP7_75t_L(lib)
  DLLx1_ASAP7_75t_L(lib)
  DLLx2_ASAP7_75t_L(lib)
  DLLx3_ASAP7_75t_L(lib)
  ICGx1_ASAP7_75t_L(lib)
  ICGx2_ASAP7_75t_L(lib)
  ICGx2p67DC_ASAP7_75t_L(lib)
  ICGx3_ASAP7_75t_L(lib)
  ICGx4DC_ASAP7_75t_L(lib)
  ICGx4_ASAP7_75t_L(lib)
  ICGx5_ASAP7_75t_L(lib)
  ICGx5p33DC_ASAP7_75t_L(lib)
  ICGx6p67DC_ASAP7_75t_L(lib)
  ICGx8DC_ASAP7_75t_L(lib)
  SDFHx1_ASAP7_75t_L(lib)
  SDFHx2_ASAP7_75t_L(lib)
  SDFHx3_ASAP7_75t_L(lib)
  SDFHx4_ASAP7_75t_L(lib)
  SDFLx1_ASAP7_75t_L(lib)
  SDFLx2_ASAP7_75t_L(lib)
  SDFLx3_ASAP7_75t_L(lib)
  SDFLx4_ASAP7_75t_L(lib)
  O2A1O1A1Ixp33_ASAP7_6t_SRAM(lib)
  O2A1O1Ixp33_ASAP7_6t_SRAM(lib)
  O2A1O1Ixp5_ASAP7_6t_SRAM(lib)
  OA211x1_ASAP7_6t_SRAM(lib)
  OA211x2_ASAP7_6t_SRAM(lib)
  OA21x1_ASAP7_6t_SRAM(lib)
  OA21x2_ASAP7_6t_SRAM(lib)
  OA221x1_ASAP7_6t_SRAM(lib)
  OA221x2_ASAP7_6t_SRAM(lib)
  OA222x1_ASAP7_6t_SRAM(lib)
  OA222x2_ASAP7_6t_SRAM(lib)
  OA22x1_ASAP7_6t_SRAM(lib)
  OA22x2_ASAP7_6t_SRAM(lib)
  OA311x1_ASAP7_6t_SRAM(lib)
  OA311x2_ASAP7_6t_SRAM(lib)
  OA31x1_ASAP7_6t_SRAM(lib)
  OA31x2_ASAP7_6t_SRAM(lib)
  OA321x1_ASAP7_6t_SRAM(lib)
  OA321x2_ASAP7_6t_SRAM(lib)
  OA322x1_ASAP7_6t_SRAM(lib)
  OA322x2_ASAP7_6t_SRAM(lib)
  OA32x1_ASAP7_6t_SRAM(lib)
  OA32x2_ASAP7_6t_SRAM(lib)
  OA331x1_ASAP7_6t_SRAM(lib)
  OA331x2_ASAP7_6t_SRAM(lib)
  OA332x1_ASAP7_6t_SRAM(lib)
  OA332x2_ASAP7_6t_SRAM(lib)
  OA333x1_ASAP7_6t_SRAM(lib)
  OA333x2_ASAP7_6t_SRAM(lib)
  OA33x1_ASAP7_6t_SRAM(lib)
  OA33x2_ASAP7_6t_SRAM(lib)
  OAI211xp33_ASAP7_6t_SRAM(lib)
  OAI211xp67b_ASAP7_6t_SRAM(lib)
  OAI21xp25_ASAP7_6t_SRAM(lib)
  OAI21xp5_ASAP7_6t_SRAM(lib)
  OAI21xp5b_ASAP7_6t_SRAM(lib)
  OAI221xp33_ASAP7_6t_SRAM(lib)
  OAI221xp33f_ASAP7_6t_SRAM(lib)
  OAI222xp33_ASAP7_6t_SRAM(lib)
  OAI22xp5_ASAP7_6t_SRAM(lib)
  OAI311xp33_ASAP7_6t_SRAM(lib)
  OAI31x1f_ASAP7_6t_SRAM(lib)
  OAI31xp5f_ASAP7_6t_SRAM(lib)
  OAI321xp33_ASAP7_6t_SRAM(lib)
  OAI322xp33_ASAP7_6t_SRAM(lib)
  OAI322xp33b_ASAP7_6t_SRAM(lib)
  OAI32xp5f_ASAP7_6t_SRAM(lib)
  OAI331xp33_ASAP7_6t_SRAM(lib)
  OAI332xp33_ASAP7_6t_SRAM(lib)
  OAI333xp33_ASAP7_6t_SRAM(lib)
  OAI33xp5f_ASAP7_6t_SRAM(lib)
  srambank_256x4x16_6t122(lib)
  srambank_128x4x64_6t122(lib)
  CKINVDCx10_ASAP7_6t_L(lib)
  CKINVDCx11_ASAP7_6t_L(lib)
  CKINVDCx12_ASAP7_6t_L(lib)
  CKINVDCx14_ASAP7_6t_L(lib)
  CKINVDCx16_ASAP7_6t_L(lib)
  CKINVDCx20_ASAP7_6t_L(lib)
  CKINVDCx5p5_ASAP7_6t_L(lib)
  CKINVDCx6p5_ASAP7_6t_L(lib)
  CKINVDCx8_ASAP7_6t_L(lib)
  CKINVDCx9p5_ASAP7_6t_L(lib)
  srambank_256x4x20_6t122(lib)
  DFFARHQNx1_ASAP7_6t_SL(lib)
  DFFASHQNx1_ASAP7_6t_SL(lib)
  DFFASRHQNx1_ASAP7_6t_SL(lib)
  DFFHQNx1_ASAP7_6t_SL(lib)
  DFFHQNx2_ASAP7_6t_SL(lib)
  DFFHQNx3_ASAP7_6t_SL(lib)
  DFFHQx4_ASAP7_6t_SL(lib)
  DFFLQNx1_ASAP7_6t_SL(lib)
  DFFLQNx2_ASAP7_6t_SL(lib)
  DFFLQNx3_ASAP7_6t_SL(lib)
  DFFLQx4_ASAP7_6t_SL(lib)
  DHLx1_ASAP7_6t_SL(lib)
  DHLx2_ASAP7_6t_SL(lib)
  DHLx3_ASAP7_6t_SL(lib)
  DLLx1_ASAP7_6t_SL(lib)
  DLLx2_ASAP7_6t_SL(lib)
  DLLx3_ASAP7_6t_SL(lib)
  ICGx10_ASAP7_6t_SL(lib)
  ICGx12_ASAP7_6t_SL(lib)
  ICGx1_ASAP7_6t_SL(lib)
  ICGx2_ASAP7_6t_SL(lib)
  ICGx3_ASAP7_6t_SL(lib)
  ICGx4_ASAP7_6t_SL(lib)
  ICGx5_ASAP7_6t_SL(lib)
  ICGx8_ASAP7_6t_SL(lib)
  SDFHx1_ASAP7_6t_SL(lib)
  SDFHx2_ASAP7_6t_SL(lib)
  SDFHx3_ASAP7_6t_SL(lib)
  SDFHx4_ASAP7_6t_SL(lib)
  SDFLx1_ASAP7_6t_SL(lib)
  SDFLx2_ASAP7_6t_SL(lib)
  SDFLx3_ASAP7_6t_SL(lib)
  SDFLx4_ASAP7_6t_SL(lib)
  srambank_128x4x20_6t122(lib)
  BUFx10_ASAP7_75t_R(lib)
  BUFx12_ASAP7_75t_R(lib)
  BUFx12f_ASAP7_75t_R(lib)
  BUFx16f_ASAP7_75t_R(lib)
  BUFx24_ASAP7_75t_R(lib)
  BUFx2_ASAP7_75t_R(lib)
  BUFx3_ASAP7_75t_R(lib)
  BUFx4_ASAP7_75t_R(lib)
  BUFx4f_ASAP7_75t_R(lib)
  BUFx5_ASAP7_75t_R(lib)
  BUFx6f_ASAP7_75t_R(lib)
  BUFx8_ASAP7_75t_R(lib)
  CKINVDCx10_ASAP7_75t_R(lib)
  CKINVDCx11_ASAP7_75t_R(lib)
  CKINVDCx12_ASAP7_75t_R(lib)
  CKINVDCx14_ASAP7_75t_R(lib)
  CKINVDCx16_ASAP7_75t_R(lib)
  CKINVDCx20_ASAP7_75t_R(lib)
  CKINVDCx5p33_ASAP7_75t_R(lib)
  CKINVDCx6p67_ASAP7_75t_R(lib)
  CKINVDCx8_ASAP7_75t_R(lib)
  CKINVDCx9p33_ASAP7_75t_R(lib)
  HB1xp67_ASAP7_75t_R(lib)
  HB2xp67_ASAP7_75t_R(lib)
  HB3xp67_ASAP7_75t_R(lib)
  HB4xp67_ASAP7_75t_R(lib)
  INVx11_ASAP7_75t_R(lib)
  INVx13_ASAP7_75t_R(lib)
  INVx1_ASAP7_75t_R(lib)
  INVx2_ASAP7_75t_R(lib)
  INVx3_ASAP7_75t_R(lib)
  INVx4_ASAP7_75t_R(lib)
  INVx5_ASAP7_75t_R(lib)
  INVx6_ASAP7_75t_R(lib)
  INVx8_ASAP7_75t_R(lib)
  INVxp33_ASAP7_75t_R(lib)
  INVxp67_ASAP7_75t_R(lib)
  srambank_64x4x32_6t122(lib)
  srambank_128x4x72_6t122(lib)
  DFFASRHQNx1_ASAP7_75t_SL(lib)
  DFFHQNx1_ASAP7_75t_SL(lib)
  DFFHQNx2_ASAP7_75t_SL(lib)
  DFFHQNx3_ASAP7_75t_SL(lib)
  DFFHQx4_ASAP7_75t_SL(lib)
  DFFLQNx1_ASAP7_75t_SL(lib)
  DFFLQNx2_ASAP7_75t_SL(lib)
  DFFLQNx3_ASAP7_75t_SL(lib)
  DFFLQx4_ASAP7_75t_SL(lib)
  DHLx1_ASAP7_75t_SL(lib)
  DHLx2_ASAP7_75t_SL(lib)
  DHLx3_ASAP7_75t_SL(lib)
  DLLx1_ASAP7_75t_SL(lib)
  DLLx2_ASAP7_75t_SL(lib)
  DLLx3_ASAP7_75t_SL(lib)
  ICGx1_ASAP7_75t_SL(lib)
  ICGx2_ASAP7_75t_SL(lib)
  ICGx2p67DC_ASAP7_75t_SL(lib)
  ICGx3_ASAP7_75t_SL(lib)
  ICGx4DC_ASAP7_75t_SL(lib)
  ICGx4_ASAP7_75t_SL(lib)
  ICGx5_ASAP7_75t_SL(lib)
  ICGx5p33DC_ASAP7_75t_SL(lib)
  ICGx6p67DC_ASAP7_75t_SL(lib)
  ICGx8DC_ASAP7_75t_SL(lib)
  SDFHx1_ASAP7_75t_SL(lib)
  SDFHx2_ASAP7_75t_SL(lib)
  SDFHx3_ASAP7_75t_SL(lib)
  SDFHx4_ASAP7_75t_SL(lib)
  SDFLx1_ASAP7_75t_SL(lib)
  SDFLx2_ASAP7_75t_SL(lib)
  SDFLx3_ASAP7_75t_SL(lib)
  SDFLx4_ASAP7_75t_SL(lib)
  AND2x2_ASAP7_75t_SRAM(lib)
  AND2x4_ASAP7_75t_SRAM(lib)
  AND2x6_ASAP7_75t_SRAM(lib)
  AND3x1_ASAP7_75t_SRAM(lib)
  AND3x2_ASAP7_75t_SRAM(lib)
  AND3x4_ASAP7_75t_SRAM(lib)
  AND4x1_ASAP7_75t_SRAM(lib)
  AND4x2_ASAP7_75t_SRAM(lib)
  AND5x1_ASAP7_75t_SRAM(lib)
  AND5x2_ASAP7_75t_SRAM(lib)
  FAx1_ASAP7_75t_SRAM(lib)
  HAxp5_ASAP7_75t_SRAM(lib)
  MAJIxp5_ASAP7_75t_SRAM(lib)
  MAJx2_ASAP7_75t_SRAM(lib)
  MAJx3_ASAP7_75t_SRAM(lib)
  NAND2x1_ASAP7_75t_SRAM(lib)
  NAND2x1p5_ASAP7_75t_SRAM(lib)
  NAND2x2_ASAP7_75t_SRAM(lib)
  NAND2xp33_ASAP7_75t_SRAM(lib)
  NAND2xp5_ASAP7_75t_SRAM(lib)
  NAND2xp67_ASAP7_75t_SRAM(lib)
  NAND3x1_ASAP7_75t_SRAM(lib)
  NAND3x2_ASAP7_75t_SRAM(lib)
  NAND3xp33_ASAP7_75t_SRAM(lib)
  NAND4xp25_ASAP7_75t_SRAM(lib)
  NAND4xp75_ASAP7_75t_SRAM(lib)
  NAND5xp2_ASAP7_75t_SRAM(lib)
  NOR2x1_ASAP7_75t_SRAM(lib)
  NOR2x1p5_ASAP7_75t_SRAM(lib)
  NOR2x2_ASAP7_75t_SRAM(lib)
  NOR2xp33_ASAP7_75t_SRAM(lib)
  NOR2xp67_ASAP7_75t_SRAM(lib)
  NOR3x1_ASAP7_75t_SRAM(lib)
  NOR3x2_ASAP7_75t_SRAM(lib)
  NOR3xp33_ASAP7_75t_SRAM(lib)
  NOR4xp25_ASAP7_75t_SRAM(lib)
  NOR4xp75_ASAP7_75t_SRAM(lib)
  NOR5xp2_ASAP7_75t_SRAM(lib)
  OR2x2_ASAP7_75t_SRAM(lib)
  OR2x4_ASAP7_75t_SRAM(lib)
  OR2x6_ASAP7_75t_SRAM(lib)
  OR3x1_ASAP7_75t_SRAM(lib)
  OR3x2_ASAP7_75t_SRAM(lib)
  OR3x4_ASAP7_75t_SRAM(lib)
  OR4x1_ASAP7_75t_SRAM(lib)
  OR4x2_ASAP7_75t_SRAM(lib)
  OR5x1_ASAP7_75t_SRAM(lib)
  OR5x2_ASAP7_75t_SRAM(lib)
  TIEHIx1_ASAP7_75t_SRAM(lib)
  TIELOx1_ASAP7_75t_SRAM(lib)
  XNOR2x1_ASAP7_75t_SRAM(lib)
  XNOR2x2_ASAP7_75t_SRAM(lib)
  XNOR2xp5_ASAP7_75t_SRAM(lib)
  XOR2x1_ASAP7_75t_SRAM(lib)
  XOR2x2_ASAP7_75t_SRAM(lib)
  XOR2xp5_ASAP7_75t_SRAM(lib)
  A2O1A1Ixp33_ASAP7_6t_R(lib)
  A2O1A1Ixp5_ASAP7_6t_R(lib)
  A2O1A1O1Ixp33_ASAP7_6t_R(lib)
  AO211x1_ASAP7_6t_R(lib)
  AO211x2_ASAP7_6t_R(lib)
  AO21x1_ASAP7_6t_R(lib)
  AO21x2_ASAP7_6t_R(lib)
  AO221x1_ASAP7_6t_R(lib)
  AO221x2_ASAP7_6t_R(lib)
  AO222x1_ASAP7_6t_R(lib)
  AO222x2_ASAP7_6t_R(lib)
  AO22x1_ASAP7_6t_R(lib)
  AO22x2_ASAP7_6t_R(lib)
  AO311x1_ASAP7_6t_R(lib)
  AO311x2_ASAP7_6t_R(lib)
  AO31x1_ASAP7_6t_R(lib)
  AO31x2_ASAP7_6t_R(lib)
  AO321x1_ASAP7_6t_R(lib)
  AO321x2_ASAP7_6t_R(lib)
  AO322x1_ASAP7_6t_R(lib)
  AO322x2_ASAP7_6t_R(lib)
  AO32x1_ASAP7_6t_R(lib)
  AO32x2_ASAP7_6t_R(lib)
  AO331x1_ASAP7_6t_R(lib)
  AO331x2_ASAP7_6t_R(lib)
  AO332x1_ASAP7_6t_R(lib)
  AO332x2_ASAP7_6t_R(lib)
  AO333x1_ASAP7_6t_R(lib)
  AO333x2_ASAP7_6t_R(lib)
  AO33x1_ASAP7_6t_R(lib)
  AO33x2_ASAP7_6t_R(lib)
  AOI211xp25_ASAP7_6t_R(lib)
  AOI211xp5_ASAP7_6t_R(lib)
  AOI21x1_ASAP7_6t_R(lib)
  AOI21xp25_ASAP7_6t_R(lib)
  AOI21xp5_ASAP7_6t_R(lib)
  AOI221xp25_ASAP7_6t_R(lib)
  AOI221xp5_ASAP7_6t_R(lib)
  AOI222xp25_ASAP7_6t_R(lib)
  AOI22xp25_ASAP7_6t_R(lib)
  AOI22xp5_ASAP7_6t_R(lib)
  AOI311xp33_ASAP7_6t_R(lib)
  AOI31xp33_ASAP7_6t_R(lib)
  AOI31xp67_ASAP7_6t_R(lib)
  AOI321xp17_ASAP7_6t_R(lib)
  AOI322xp17_ASAP7_6t_R(lib)
  AOI32xp33_ASAP7_6t_R(lib)
  AOI331xp17_ASAP7_6t_R(lib)
  AOI332xp17_ASAP7_6t_R(lib)
  AOI333xp17_ASAP7_6t_R(lib)
  AOI33xp33_ASAP7_6t_R(lib)
  srambank_256x4x36_6t122(lib)
  srambank_128x4x80_6t122(lib)
  srambank_64x4x18_6t122(lib)
  srambank_64x4x72_6t122(lib)
  O2A1O1Ixp33_ASAP7_75t_R(lib)
  O2A1O1Ixp5_ASAP7_75t_R(lib)
  OA211x2_ASAP7_75t_R(lib)
  OA21x2_ASAP7_75t_R(lib)
  OA221x2_ASAP7_75t_R(lib)
  OA222x2_ASAP7_75t_R(lib)
  OA22x2_ASAP7_75t_R(lib)
  OA31x2_ASAP7_75t_R(lib)
  OA331x1_ASAP7_75t_R(lib)
  OA331x2_ASAP7_75t_R(lib)
  OA332x1_ASAP7_75t_R(lib)
  OA332x2_ASAP7_75t_R(lib)
  OA333x1_ASAP7_75t_R(lib)
  OA333x2_ASAP7_75t_R(lib)
  OA33x2_ASAP7_75t_R(lib)
  OAI211xp5_ASAP7_75t_R(lib)
  OAI21x1_ASAP7_75t_R(lib)
  OAI21xp33_ASAP7_75t_R(lib)
  OAI21xp5_ASAP7_75t_R(lib)
  OAI221xp5_ASAP7_75t_R(lib)
  OAI222xp33_ASAP7_75t_R(lib)
  OAI22x1_ASAP7_75t_R(lib)
  OAI22xp33_ASAP7_75t_R(lib)
  OAI22xp5_ASAP7_75t_R(lib)
  OAI311xp33_ASAP7_75t_R(lib)
  OAI31xp33_ASAP7_75t_R(lib)
  OAI31xp67_ASAP7_75t_R(lib)
  OAI321xp33_ASAP7_75t_R(lib)
  OAI322xp33_ASAP7_75t_R(lib)
  OAI32xp33_ASAP7_75t_R(lib)
  OAI331xp33_ASAP7_75t_R(lib)
  OAI332xp33_ASAP7_75t_R(lib)
  OAI333xp33_ASAP7_75t_R(lib)
  OAI33xp33_ASAP7_75t_R(lib)
  AND2x2_ASAP7_75t_SL(lib)
  AND2x4_ASAP7_75t_SL(lib)
  AND2x6_ASAP7_75t_SL(lib)
  AND3x1_ASAP7_75t_SL(lib)
  AND3x2_ASAP7_75t_SL(lib)
  AND3x4_ASAP7_75t_SL(lib)
  AND4x1_ASAP7_75t_SL(lib)
  AND4x2_ASAP7_75t_SL(lib)
  AND5x1_ASAP7_75t_SL(lib)
  AND5x2_ASAP7_75t_SL(lib)
  FAx1_ASAP7_75t_SL(lib)
  HAxp5_ASAP7_75t_SL(lib)
  MAJIxp5_ASAP7_75t_SL(lib)
  MAJx2_ASAP7_75t_SL(lib)
  MAJx3_ASAP7_75t_SL(lib)
  NAND2x1_ASAP7_75t_SL(lib)
  NAND2x1p5_ASAP7_75t_SL(lib)
  NAND2x2_ASAP7_75t_SL(lib)
  NAND2xp33_ASAP7_75t_SL(lib)
  NAND2xp5_ASAP7_75t_SL(lib)
  NAND2xp67_ASAP7_75t_SL(lib)
  NAND3x1_ASAP7_75t_SL(lib)
  NAND3x2_ASAP7_75t_SL(lib)
  NAND3xp33_ASAP7_75t_SL(lib)
  NAND4xp25_ASAP7_75t_SL(lib)
  NAND4xp75_ASAP7_75t_SL(lib)
  NAND5xp2_ASAP7_75t_SL(lib)
  NOR2x1_ASAP7_75t_SL(lib)
  NOR2x1p5_ASAP7_75t_SL(lib)
  NOR2x2_ASAP7_75t_SL(lib)
  NOR2xp33_ASAP7_75t_SL(lib)
  NOR2xp67_ASAP7_75t_SL(lib)
  NOR3x1_ASAP7_75t_SL(lib)
  NOR3x2_ASAP7_75t_SL(lib)
  NOR3xp33_ASAP7_75t_SL(lib)
  NOR4xp25_ASAP7_75t_SL(lib)
  NOR4xp75_ASAP7_75t_SL(lib)
  NOR5xp2_ASAP7_75t_SL(lib)
  OR2x2_ASAP7_75t_SL(lib)
  OR2x4_ASAP7_75t_SL(lib)
  OR2x6_ASAP7_75t_SL(lib)
  OR3x1_ASAP7_75t_SL(lib)
  OR3x2_ASAP7_75t_SL(lib)
  OR3x4_ASAP7_75t_SL(lib)
  OR4x1_ASAP7_75t_SL(lib)
  OR4x2_ASAP7_75t_SL(lib)
  OR5x1_ASAP7_75t_SL(lib)
  OR5x2_ASAP7_75t_SL(lib)
  TIEHIx1_ASAP7_75t_SL(lib)
  TIELOx1_ASAP7_75t_SL(lib)
  XNOR2x1_ASAP7_75t_SL(lib)
  XNOR2x2_ASAP7_75t_SL(lib)
  XNOR2xp5_ASAP7_75t_SL(lib)
  XOR2x1_ASAP7_75t_SL(lib)
  XOR2x2_ASAP7_75t_SL(lib)
  XOR2xp5_ASAP7_75t_SL(lib)
  DFFARHQNx1_ASAP7_6t_SRAM(lib)
  DFFASHQNx1_ASAP7_6t_SRAM(lib)
  DFFASRHQNx1_ASAP7_6t_SRAM(lib)
  DFFHQNx1_ASAP7_6t_SRAM(lib)
  DFFHQNx2_ASAP7_6t_SRAM(lib)
  DFFHQNx3_ASAP7_6t_SRAM(lib)
  DFFHQx4_ASAP7_6t_SRAM(lib)
  DFFLQNx1_ASAP7_6t_SRAM(lib)
  DFFLQNx2_ASAP7_6t_SRAM(lib)
  DFFLQNx3_ASAP7_6t_SRAM(lib)
  DFFLQx4_ASAP7_6t_SRAM(lib)
  DHLx1_ASAP7_6t_SRAM(lib)
  DHLx2_ASAP7_6t_SRAM(lib)
  DHLx3_ASAP7_6t_SRAM(lib)
  DLLx1_ASAP7_6t_SRAM(lib)
  DLLx2_ASAP7_6t_SRAM(lib)
  DLLx3_ASAP7_6t_SRAM(lib)
  ICGx10_ASAP7_6t_SRAM(lib)
  ICGx12_ASAP7_6t_SRAM(lib)
  ICGx1_ASAP7_6t_SRAM(lib)
  ICGx2_ASAP7_6t_SRAM(lib)
  ICGx3_ASAP7_6t_SRAM(lib)
  ICGx4_ASAP7_6t_SRAM(lib)
  ICGx5_ASAP7_6t_SRAM(lib)
  ICGx8_ASAP7_6t_SRAM(lib)
  SDFHx1_ASAP7_6t_SRAM(lib)
  SDFHx2_ASAP7_6t_SRAM(lib)
  SDFHx3_ASAP7_6t_SRAM(lib)
  SDFHx4_ASAP7_6t_SRAM(lib)
  SDFLx1_ASAP7_6t_SRAM(lib)
  SDFLx2_ASAP7_6t_SRAM(lib)
  SDFLx3_ASAP7_6t_SRAM(lib)
  SDFLx4_ASAP7_6t_SRAM(lib)
  A2O1A1Ixp33_ASAP7_6t_SL(lib)
  A2O1A1Ixp5_ASAP7_6t_SL(lib)
  A2O1A1O1Ixp33_ASAP7_6t_SL(lib)
  AO211x1_ASAP7_6t_SL(lib)
  AO211x2_ASAP7_6t_SL(lib)
  AO21x1_ASAP7_6t_SL(lib)
  AO21x2_ASAP7_6t_SL(lib)
  AO221x1_ASAP7_6t_SL(lib)
  AO221x2_ASAP7_6t_SL(lib)
  AO222x1_ASAP7_6t_SL(lib)
  AO222x2_ASAP7_6t_SL(lib)
  AO22x1_ASAP7_6t_SL(lib)
  AO22x2_ASAP7_6t_SL(lib)
  AO311x1_ASAP7_6t_SL(lib)
  AO311x2_ASAP7_6t_SL(lib)
  AO31x1_ASAP7_6t_SL(lib)
  AO31x2_ASAP7_6t_SL(lib)
  AO321x1_ASAP7_6t_SL(lib)
  AO321x2_ASAP7_6t_SL(lib)
  AO322x1_ASAP7_6t_SL(lib)
  AO322x2_ASAP7_6t_SL(lib)
  AO32x1_ASAP7_6t_SL(lib)
  AO32x2_ASAP7_6t_SL(lib)
  AO331x1_ASAP7_6t_SL(lib)
  AO331x2_ASAP7_6t_SL(lib)
  AO332x1_ASAP7_6t_SL(lib)
  AO332x2_ASAP7_6t_SL(lib)
  AO333x1_ASAP7_6t_SL(lib)
  AO333x2_ASAP7_6t_SL(lib)
  AO33x1_ASAP7_6t_SL(lib)
  AO33x2_ASAP7_6t_SL(lib)
  AOI211xp25_ASAP7_6t_SL(lib)
  AOI211xp5_ASAP7_6t_SL(lib)
  AOI21x1_ASAP7_6t_SL(lib)
  AOI21xp25_ASAP7_6t_SL(lib)
  AOI21xp5_ASAP7_6t_SL(lib)
  AOI221xp25_ASAP7_6t_SL(lib)
  AOI221xp5_ASAP7_6t_SL(lib)
  AOI222xp25_ASAP7_6t_SL(lib)
  AOI22xp25_ASAP7_6t_SL(lib)
  AOI22xp5_ASAP7_6t_SL(lib)
  AOI311xp33_ASAP7_6t_SL(lib)
  AOI31xp33_ASAP7_6t_SL(lib)
  AOI31xp67_ASAP7_6t_SL(lib)
  AOI321xp17_ASAP7_6t_SL(lib)
  AOI322xp17_ASAP7_6t_SL(lib)
  AOI32xp33_ASAP7_6t_SL(lib)
  AOI331xp17_ASAP7_6t_SL(lib)
  AOI332xp17_ASAP7_6t_SL(lib)
  AOI333xp17_ASAP7_6t_SL(lib)
  AOI33xp33_ASAP7_6t_SL(lib)
  srambank_256x4x32_6t122(lib)
  DFFASRHQNx1_ASAP7_75t_R(lib)
  DFFHQNx1_ASAP7_75t_R(lib)
  DFFHQNx2_ASAP7_75t_R(lib)
  DFFHQNx3_ASAP7_75t_R(lib)
  DFFHQx4_ASAP7_75t_R(lib)
  DFFLQNx1_ASAP7_75t_R(lib)
  DFFLQNx2_ASAP7_75t_R(lib)
  DFFLQNx3_ASAP7_75t_R(lib)
  DFFLQx4_ASAP7_75t_R(lib)
  DHLx1_ASAP7_75t_R(lib)
  DHLx2_ASAP7_75t_R(lib)
  DHLx3_ASAP7_75t_R(lib)
  DLLx1_ASAP7_75t_R(lib)
  DLLx2_ASAP7_75t_R(lib)
  DLLx3_ASAP7_75t_R(lib)
  ICGx1_ASAP7_75t_R(lib)
  ICGx2_ASAP7_75t_R(lib)
  ICGx2p67DC_ASAP7_75t_R(lib)
  ICGx3_ASAP7_75t_R(lib)
  ICGx4DC_ASAP7_75t_R(lib)
  ICGx4_ASAP7_75t_R(lib)
  ICGx5_ASAP7_75t_R(lib)
  ICGx5p33DC_ASAP7_75t_R(lib)
  ICGx6p67DC_ASAP7_75t_R(lib)
  ICGx8DC_ASAP7_75t_R(lib)
  SDFHx1_ASAP7_75t_R(lib)
  SDFHx2_ASAP7_75t_R(lib)
  SDFHx3_ASAP7_75t_R(lib)
  SDFHx4_ASAP7_75t_R(lib)
  SDFLx1_ASAP7_75t_R(lib)
  SDFLx2_ASAP7_75t_R(lib)
  SDFLx3_ASAP7_75t_R(lib)
  SDFLx4_ASAP7_75t_R(lib)
  srambank_128x4x34_6t122(lib)
  DFFARHQNx1_ASAP7_6t_L(lib)
  DFFASHQNx1_ASAP7_6t_L(lib)
  DFFASRHQNx1_ASAP7_6t_L(lib)
  DFFHQNx1_ASAP7_6t_L(lib)
  DFFHQNx2_ASAP7_6t_L(lib)
  DFFHQNx3_ASAP7_6t_L(lib)
  DFFHQx4_ASAP7_6t_L(lib)
  DFFLQNx1_ASAP7_6t_L(lib)
  DFFLQNx2_ASAP7_6t_L(lib)
  DFFLQNx3_ASAP7_6t_L(lib)
  DFFLQx4_ASAP7_6t_L(lib)
  DHLx1_ASAP7_6t_L(lib)
  DHLx2_ASAP7_6t_L(lib)
  DHLx3_ASAP7_6t_L(lib)
  DLLx1_ASAP7_6t_L(lib)
  DLLx2_ASAP7_6t_L(lib)
  DLLx3_ASAP7_6t_L(lib)
  ICGx10_ASAP7_6t_L(lib)
  ICGx12_ASAP7_6t_L(lib)
  ICGx1_ASAP7_6t_L(lib)
  ICGx2_ASAP7_6t_L(lib)
  ICGx3_ASAP7_6t_L(lib)
  ICGx4_ASAP7_6t_L(lib)
  ICGx5_ASAP7_6t_L(lib)
  ICGx8_ASAP7_6t_L(lib)
  SDFHx1_ASAP7_6t_L(lib)
  SDFHx2_ASAP7_6t_L(lib)
  SDFHx3_ASAP7_6t_L(lib)
  SDFHx4_ASAP7_6t_L(lib)
  SDFLx1_ASAP7_6t_L(lib)
  SDFLx2_ASAP7_6t_L(lib)
  SDFLx3_ASAP7_6t_L(lib)
  SDFLx4_ASAP7_6t_L(lib)
  srambank_64x4x80_6t122(lib)
  A2O1A1Ixp33_ASAP7_75t_L(lib)
  A2O1A1O1Ixp25_ASAP7_75t_L(lib)
  AO211x2_ASAP7_75t_L(lib)
  AO21x1_ASAP7_75t_L(lib)
  AO21x2_ASAP7_75t_L(lib)
  AO221x1_ASAP7_75t_L(lib)
  AO221x2_ASAP7_75t_L(lib)
  AO222x2_ASAP7_75t_L(lib)
  AO22x1_ASAP7_75t_L(lib)
  AO22x2_ASAP7_75t_L(lib)
  AO31x2_ASAP7_75t_L(lib)
  AO322x2_ASAP7_75t_L(lib)
  AO32x1_ASAP7_75t_L(lib)
  AO32x2_ASAP7_75t_L(lib)
  AO331x1_ASAP7_75t_L(lib)
  AO331x2_ASAP7_75t_L(lib)
  AO332x1_ASAP7_75t_L(lib)
  AO332x2_ASAP7_75t_L(lib)
  AO333x1_ASAP7_75t_L(lib)
  AO333x2_ASAP7_75t_L(lib)
  AO33x2_ASAP7_75t_L(lib)
  AOI211x1_ASAP7_75t_L(lib)
  AOI211xp5_ASAP7_75t_L(lib)
  AOI21x1_ASAP7_75t_L(lib)
  AOI21xp33_ASAP7_75t_L(lib)
  AOI21xp5_ASAP7_75t_L(lib)
  AOI221x1_ASAP7_75t_L(lib)
  AOI221xp5_ASAP7_75t_L(lib)
  AOI222xp33_ASAP7_75t_L(lib)
  AOI22x1_ASAP7_75t_L(lib)
  AOI22xp33_ASAP7_75t_L(lib)
  AOI22xp5_ASAP7_75t_L(lib)
  AOI311xp33_ASAP7_75t_L(lib)
  AOI31xp33_ASAP7_75t_L(lib)
  AOI31xp67_ASAP7_75t_L(lib)
  AOI321xp33_ASAP7_75t_L(lib)
  AOI322xp5_ASAP7_75t_L(lib)
  AOI32xp33_ASAP7_75t_L(lib)
  AOI331xp33_ASAP7_75t_L(lib)
  AOI332xp33_ASAP7_75t_L(lib)
  AOI333xp33_ASAP7_75t_L(lib)
  AOI33xp33_ASAP7_75t_L(lib)
  O2A1O1A1Ixp33_ASAP7_6t_R(lib)
  O2A1O1Ixp33_ASAP7_6t_R(lib)
  O2A1O1Ixp5_ASAP7_6t_R(lib)
  OA211x1_ASAP7_6t_R(lib)
  OA211x2_ASAP7_6t_R(lib)
  OA21x1_ASAP7_6t_R(lib)
  OA21x2_ASAP7_6t_R(lib)
  OA221x1_ASAP7_6t_R(lib)
  OA221x2_ASAP7_6t_R(lib)
  OA222x1_ASAP7_6t_R(lib)
  OA222x2_ASAP7_6t_R(lib)
  OA22x1_ASAP7_6t_R(lib)
  OA22x2_ASAP7_6t_R(lib)
  OA311x1_ASAP7_6t_R(lib)
  OA311x2_ASAP7_6t_R(lib)
  OA31x1_ASAP7_6t_R(lib)
  OA31x2_ASAP7_6t_R(lib)
  OA321x1_ASAP7_6t_R(lib)
  OA321x2_ASAP7_6t_R(lib)
  OA322x1_ASAP7_6t_R(lib)
  OA322x2_ASAP7_6t_R(lib)
  OA32x1_ASAP7_6t_R(lib)
  OA32x2_ASAP7_6t_R(lib)
  OA331x1_ASAP7_6t_R(lib)
  OA331x2_ASAP7_6t_R(lib)
  OA332x1_ASAP7_6t_R(lib)
  OA332x2_ASAP7_6t_R(lib)
  OA333x1_ASAP7_6t_R(lib)
  OA333x2_ASAP7_6t_R(lib)
  OA33x1_ASAP7_6t_R(lib)
  OA33x2_ASAP7_6t_R(lib)
  OAI211xp33_ASAP7_6t_R(lib)
  OAI211xp67b_ASAP7_6t_R(lib)
  OAI21xp25_ASAP7_6t_R(lib)
  OAI21xp5_ASAP7_6t_R(lib)
  OAI21xp5b_ASAP7_6t_R(lib)
  OAI221xp33_ASAP7_6t_R(lib)
  OAI221xp33f_ASAP7_6t_R(lib)
  OAI222xp33_ASAP7_6t_R(lib)
  OAI22xp5_ASAP7_6t_R(lib)
  OAI311xp33_ASAP7_6t_R(lib)
  OAI31x1f_ASAP7_6t_R(lib)
  OAI31xp5f_ASAP7_6t_R(lib)
  OAI321xp33_ASAP7_6t_R(lib)
  OAI322xp33_ASAP7_6t_R(lib)
  OAI322xp33b_ASAP7_6t_R(lib)
  OAI32xp5f_ASAP7_6t_R(lib)
  OAI331xp33_ASAP7_6t_R(lib)
  OAI332xp33_ASAP7_6t_R(lib)
  OAI333xp33_ASAP7_6t_R(lib)
  OAI33xp5f_ASAP7_6t_R(lib)
  O2A1O1Ixp33_ASAP7_75t_L(lib)
  O2A1O1Ixp5_ASAP7_75t_L(lib)
  OA211x2_ASAP7_75t_L(lib)
  OA21x2_ASAP7_75t_L(lib)
  OA221x2_ASAP7_75t_L(lib)
  OA222x2_ASAP7_75t_L(lib)
  OA22x2_ASAP7_75t_L(lib)
  OA31x2_ASAP7_75t_L(lib)
  OA331x1_ASAP7_75t_L(lib)
  OA331x2_ASAP7_75t_L(lib)
  OA332x1_ASAP7_75t_L(lib)
  OA332x2_ASAP7_75t_L(lib)
  OA333x1_ASAP7_75t_L(lib)
  OA333x2_ASAP7_75t_L(lib)
  OA33x2_ASAP7_75t_L(lib)
  OAI211xp5_ASAP7_75t_L(lib)
  OAI21x1_ASAP7_75t_L(lib)
  OAI21xp33_ASAP7_75t_L(lib)
  OAI21xp5_ASAP7_75t_L(lib)
  OAI221xp5_ASAP7_75t_L(lib)
  OAI222xp33_ASAP7_75t_L(lib)
  OAI22x1_ASAP7_75t_L(lib)
  OAI22xp33_ASAP7_75t_L(lib)
  OAI22xp5_ASAP7_75t_L(lib)
  OAI311xp33_ASAP7_75t_L(lib)
  OAI31xp33_ASAP7_75t_L(lib)
  OAI31xp67_ASAP7_75t_L(lib)
  OAI321xp33_ASAP7_75t_L(lib)
  OAI322xp33_ASAP7_75t_L(lib)
  OAI32xp33_ASAP7_75t_L(lib)
  OAI331xp33_ASAP7_75t_L(lib)
  OAI332xp33_ASAP7_75t_L(lib)
  OAI333xp33_ASAP7_75t_L(lib)
  OAI33xp33_ASAP7_75t_L(lib)
  srambank_128x4x32_6t122(lib)
  AND2x2_ASAP7_75t_R(lib)
  AND2x4_ASAP7_75t_R(lib)
  AND2x6_ASAP7_75t_R(lib)
  AND3x1_ASAP7_75t_R(lib)
  AND3x2_ASAP7_75t_R(lib)
  AND3x4_ASAP7_75t_R(lib)
  AND4x1_ASAP7_75t_R(lib)
  AND4x2_ASAP7_75t_R(lib)
  AND5x1_ASAP7_75t_R(lib)
  AND5x2_ASAP7_75t_R(lib)
  FAx1_ASAP7_75t_R(lib)
  HAxp5_ASAP7_75t_R(lib)
  MAJIxp5_ASAP7_75t_R(lib)
  MAJx2_ASAP7_75t_R(lib)
  MAJx3_ASAP7_75t_R(lib)
  NAND2x1_ASAP7_75t_R(lib)
  NAND2x1p5_ASAP7_75t_R(lib)
  NAND2x2_ASAP7_75t_R(lib)
  NAND2xp33_ASAP7_75t_R(lib)
  NAND2xp5_ASAP7_75t_R(lib)
  NAND2xp67_ASAP7_75t_R(lib)
  NAND3x1_ASAP7_75t_R(lib)
  NAND3x2_ASAP7_75t_R(lib)
  NAND3xp33_ASAP7_75t_R(lib)
  NAND4xp25_ASAP7_75t_R(lib)
  NAND4xp75_ASAP7_75t_R(lib)
  NAND5xp2_ASAP7_75t_R(lib)
  NOR2x1_ASAP7_75t_R(lib)
  NOR2x1p5_ASAP7_75t_R(lib)
  NOR2x2_ASAP7_75t_R(lib)
  NOR2xp33_ASAP7_75t_R(lib)
  NOR2xp67_ASAP7_75t_R(lib)
  NOR3x1_ASAP7_75t_R(lib)
  NOR3x2_ASAP7_75t_R(lib)
  NOR3xp33_ASAP7_75t_R(lib)
  NOR4xp25_ASAP7_75t_R(lib)
  NOR4xp75_ASAP7_75t_R(lib)
  NOR5xp2_ASAP7_75t_R(lib)
  OR2x2_ASAP7_75t_R(lib)
  OR2x4_ASAP7_75t_R(lib)
  OR2x6_ASAP7_75t_R(lib)
  OR3x1_ASAP7_75t_R(lib)
  OR3x2_ASAP7_75t_R(lib)
  OR3x4_ASAP7_75t_R(lib)
  OR4x1_ASAP7_75t_R(lib)
  OR4x2_ASAP7_75t_R(lib)
  OR5x1_ASAP7_75t_R(lib)
  OR5x2_ASAP7_75t_R(lib)
  TIEHIx1_ASAP7_75t_R(lib)
  TIELOx1_ASAP7_75t_R(lib)
  XNOR2x1_ASAP7_75t_R(lib)
  XNOR2x2_ASAP7_75t_R(lib)
  XNOR2xp5_ASAP7_75t_R(lib)
  XOR2x1_ASAP7_75t_R(lib)
  XOR2x2_ASAP7_75t_R(lib)
  XOR2xp5_ASAP7_75t_R(lib)
  O2A1O1Ixp33_ASAP7_75t_SL(lib)
  O2A1O1Ixp5_ASAP7_75t_SL(lib)
  OA211x2_ASAP7_75t_SL(lib)
  OA21x2_ASAP7_75t_SL(lib)
  OA221x2_ASAP7_75t_SL(lib)
  OA222x2_ASAP7_75t_SL(lib)
  OA22x2_ASAP7_75t_SL(lib)
  OA31x2_ASAP7_75t_SL(lib)
  OA331x1_ASAP7_75t_SL(lib)
  OA331x2_ASAP7_75t_SL(lib)
  OA332x1_ASAP7_75t_SL(lib)
  OA332x2_ASAP7_75t_SL(lib)
  OA333x1_ASAP7_75t_SL(lib)
  OA333x2_ASAP7_75t_SL(lib)
  OA33x2_ASAP7_75t_SL(lib)
  OAI211xp5_ASAP7_75t_SL(lib)
  OAI21x1_ASAP7_75t_SL(lib)
  OAI21xp33_ASAP7_75t_SL(lib)
  OAI21xp5_ASAP7_75t_SL(lib)
  OAI221xp5_ASAP7_75t_SL(lib)
  OAI222xp33_ASAP7_75t_SL(lib)
  OAI22x1_ASAP7_75t_SL(lib)
  OAI22xp33_ASAP7_75t_SL(lib)
  OAI22xp5_ASAP7_75t_SL(lib)
  OAI311xp33_ASAP7_75t_SL(lib)
  OAI31xp33_ASAP7_75t_SL(lib)
  OAI31xp67_ASAP7_75t_SL(lib)
  OAI321xp33_ASAP7_75t_SL(lib)
  OAI322xp33_ASAP7_75t_SL(lib)
  OAI32xp33_ASAP7_75t_SL(lib)
  OAI331xp33_ASAP7_75t_SL(lib)
  OAI332xp33_ASAP7_75t_SL(lib)
  OAI333xp33_ASAP7_75t_SL(lib)
  OAI33xp33_ASAP7_75t_SL(lib)
  BUFx10_ASAP7_75t_L(lib)
  BUFx12_ASAP7_75t_L(lib)
  BUFx12f_ASAP7_75t_L(lib)
  BUFx16f_ASAP7_75t_L(lib)
  BUFx24_ASAP7_75t_L(lib)
  BUFx2_ASAP7_75t_L(lib)
  BUFx3_ASAP7_75t_L(lib)
  BUFx4_ASAP7_75t_L(lib)
  BUFx4f_ASAP7_75t_L(lib)
  BUFx5_ASAP7_75t_L(lib)
  BUFx6f_ASAP7_75t_L(lib)
  BUFx8_ASAP7_75t_L(lib)
  CKINVDCx10_ASAP7_75t_L(lib)
  CKINVDCx11_ASAP7_75t_L(lib)
  CKINVDCx12_ASAP7_75t_L(lib)
  CKINVDCx14_ASAP7_75t_L(lib)
  CKINVDCx16_ASAP7_75t_L(lib)
  CKINVDCx20_ASAP7_75t_L(lib)
  CKINVDCx5p33_ASAP7_75t_L(lib)
  CKINVDCx6p67_ASAP7_75t_L(lib)
  CKINVDCx8_ASAP7_75t_L(lib)
  CKINVDCx9p33_ASAP7_75t_L(lib)
  HB1xp67_ASAP7_75t_L(lib)
  HB2xp67_ASAP7_75t_L(lib)
  HB3xp67_ASAP7_75t_L(lib)
  HB4xp67_ASAP7_75t_L(lib)
  INVx11_ASAP7_75t_L(lib)
  INVx13_ASAP7_75t_L(lib)
  INVx1_ASAP7_75t_L(lib)
  INVx2_ASAP7_75t_L(lib)
  INVx3_ASAP7_75t_L(lib)
  INVx4_ASAP7_75t_L(lib)
  INVx5_ASAP7_75t_L(lib)
  INVx6_ASAP7_75t_L(lib)
  INVx8_ASAP7_75t_L(lib)
  INVxp33_ASAP7_75t_L(lib)
  INVxp67_ASAP7_75t_L(lib)
  AND2x2_ASAP7_75t_L(lib)
  AND2x4_ASAP7_75t_L(lib)
  AND2x6_ASAP7_75t_L(lib)
  AND3x1_ASAP7_75t_L(lib)
  AND3x2_ASAP7_75t_L(lib)
  AND3x4_ASAP7_75t_L(lib)
  AND4x1_ASAP7_75t_L(lib)
  AND4x2_ASAP7_75t_L(lib)
  AND5x1_ASAP7_75t_L(lib)
  AND5x2_ASAP7_75t_L(lib)
  FAx1_ASAP7_75t_L(lib)
  HAxp5_ASAP7_75t_L(lib)
  MAJIxp5_ASAP7_75t_L(lib)
  MAJx2_ASAP7_75t_L(lib)
  MAJx3_ASAP7_75t_L(lib)
  NAND2x1_ASAP7_75t_L(lib)
  NAND2x1p5_ASAP7_75t_L(lib)
  NAND2x2_ASAP7_75t_L(lib)
  NAND2xp33_ASAP7_75t_L(lib)
  NAND2xp5_ASAP7_75t_L(lib)
  NAND2xp67_ASAP7_75t_L(lib)
  NAND3x1_ASAP7_75t_L(lib)
  NAND3x2_ASAP7_75t_L(lib)
  NAND3xp33_ASAP7_75t_L(lib)
  NAND4xp25_ASAP7_75t_L(lib)
  NAND4xp75_ASAP7_75t_L(lib)
  NAND5xp2_ASAP7_75t_L(lib)
  NOR2x1_ASAP7_75t_L(lib)
  NOR2x1p5_ASAP7_75t_L(lib)
  NOR2x2_ASAP7_75t_L(lib)
  NOR2xp33_ASAP7_75t_L(lib)
  NOR2xp67_ASAP7_75t_L(lib)
  NOR3x1_ASAP7_75t_L(lib)
  NOR3x2_ASAP7_75t_L(lib)
  NOR3xp33_ASAP7_75t_L(lib)
  NOR4xp25_ASAP7_75t_L(lib)
  NOR4xp75_ASAP7_75t_L(lib)
  NOR5xp2_ASAP7_75t_L(lib)
  OR2x2_ASAP7_75t_L(lib)
  OR2x4_ASAP7_75t_L(lib)
  OR2x6_ASAP7_75t_L(lib)
  OR3x1_ASAP7_75t_L(lib)
  OR3x2_ASAP7_75t_L(lib)
  OR3x4_ASAP7_75t_L(lib)
  OR4x1_ASAP7_75t_L(lib)
  OR4x2_ASAP7_75t_L(lib)
  OR5x1_ASAP7_75t_L(lib)
  OR5x2_ASAP7_75t_L(lib)
  TIEHIx1_ASAP7_75t_L(lib)
  TIELOx1_ASAP7_75t_L(lib)
  XNOR2x1_ASAP7_75t_L(lib)
  XNOR2x2_ASAP7_75t_L(lib)
  XNOR2xp5_ASAP7_75t_L(lib)
  XOR2x1_ASAP7_75t_L(lib)
  XOR2x2_ASAP7_75t_L(lib)
  XOR2xp5_ASAP7_75t_L(lib)
  srambank_128x4x18_6t122(lib)
  srambank_256x4x74_6t122(lib)
  srambank_64x4x16_6t122(lib)
  srambank_128x4x36_6t122(lib)
  BUFx10_ASAP7_6t_L(lib)
  BUFx12_ASAP7_6t_L(lib)
  BUFx12q_ASAP7_6t_L(lib)
  BUFx16q_ASAP7_6t_L(lib)
  BUFx24_ASAP7_6t_L(lib)
  BUFx2_ASAP7_6t_L(lib)
  BUFx3_ASAP7_6t_L(lib)
  BUFx4_ASAP7_6t_L(lib)
  BUFx4q_ASAP7_6t_L(lib)
  BUFx5_ASAP7_6t_L(lib)
  BUFx6q_ASAP7_6t_L(lib)
  BUFx8_ASAP7_6t_L(lib)
  HB1x1_ASAP7_6t_L(lib)
  HB2x1_ASAP7_6t_L(lib)
  HB3x1_ASAP7_6t_L(lib)
  HB4x1_ASAP7_6t_L(lib)
  INVx11_ASAP7_6t_L(lib)
  INVx13_ASAP7_6t_L(lib)
  INVx1_ASAP7_6t_L(lib)
  INVx2_ASAP7_6t_L(lib)
  INVx3_ASAP7_6t_L(lib)
  INVx4_ASAP7_6t_L(lib)
  INVx5_ASAP7_6t_L(lib)
  INVx6_ASAP7_6t_L(lib)
  INVx8_ASAP7_6t_L(lib)
  INVxp5_ASAP7_6t_L(lib)
  A2O1A1Ixp33_ASAP7_75t_R(lib)
  A2O1A1O1Ixp25_ASAP7_75t_R(lib)
  AO211x2_ASAP7_75t_R(lib)
  AO21x1_ASAP7_75t_R(lib)
  AO21x2_ASAP7_75t_R(lib)
  AO221x1_ASAP7_75t_R(lib)
  AO221x2_ASAP7_75t_R(lib)
  AO222x2_ASAP7_75t_R(lib)
  AO22x1_ASAP7_75t_R(lib)
  AO22x2_ASAP7_75t_R(lib)
  AO31x2_ASAP7_75t_R(lib)
  AO322x2_ASAP7_75t_R(lib)
  AO32x1_ASAP7_75t_R(lib)
  AO32x2_ASAP7_75t_R(lib)
  AO331x1_ASAP7_75t_R(lib)
  AO331x2_ASAP7_75t_R(lib)
  AO332x1_ASAP7_75t_R(lib)
  AO332x2_ASAP7_75t_R(lib)
  AO333x1_ASAP7_75t_R(lib)
  AO333x2_ASAP7_75t_R(lib)
  AO33x2_ASAP7_75t_R(lib)
  AOI211x1_ASAP7_75t_R(lib)
  AOI211xp5_ASAP7_75t_R(lib)
  AOI21x1_ASAP7_75t_R(lib)
  AOI21xp33_ASAP7_75t_R(lib)
  AOI21xp5_ASAP7_75t_R(lib)
  AOI221x1_ASAP7_75t_R(lib)
  AOI221xp5_ASAP7_75t_R(lib)
  AOI222xp33_ASAP7_75t_R(lib)
  AOI22x1_ASAP7_75t_R(lib)
  AOI22xp33_ASAP7_75t_R(lib)
  AOI22xp5_ASAP7_75t_R(lib)
  AOI311xp33_ASAP7_75t_R(lib)
  AOI31xp33_ASAP7_75t_R(lib)
  AOI31xp67_ASAP7_75t_R(lib)
  AOI321xp33_ASAP7_75t_R(lib)
  AOI322xp5_ASAP7_75t_R(lib)
  AOI32xp33_ASAP7_75t_R(lib)
  AOI331xp33_ASAP7_75t_R(lib)
  AOI332xp33_ASAP7_75t_R(lib)
  AOI333xp33_ASAP7_75t_R(lib)
  AOI33xp33_ASAP7_75t_R(lib)
  srambank_128x4x48_6t122(lib)
  A2O1A1Ixp33_ASAP7_75t_SRAM(lib)
  A2O1A1O1Ixp25_ASAP7_75t_SRAM(lib)
  AO211x2_ASAP7_75t_SRAM(lib)
  AO21x1_ASAP7_75t_SRAM(lib)
  AO21x2_ASAP7_75t_SRAM(lib)
  AO221x1_ASAP7_75t_SRAM(lib)
  AO221x2_ASAP7_75t_SRAM(lib)
  AO222x2_ASAP7_75t_SRAM(lib)
  AO22x1_ASAP7_75t_SRAM(lib)
  AO22x2_ASAP7_75t_SRAM(lib)
  AO31x2_ASAP7_75t_SRAM(lib)
  AO322x2_ASAP7_75t_SRAM(lib)
  AO32x1_ASAP7_75t_SRAM(lib)
  AO32x2_ASAP7_75t_SRAM(lib)
  AO331x1_ASAP7_75t_SRAM(lib)
  AO331x2_ASAP7_75t_SRAM(lib)
  AO332x1_ASAP7_75t_SRAM(lib)
  AO332x2_ASAP7_75t_SRAM(lib)
  AO333x1_ASAP7_75t_SRAM(lib)
  AO333x2_ASAP7_75t_SRAM(lib)
  AO33x2_ASAP7_75t_SRAM(lib)
  AOI211x1_ASAP7_75t_SRAM(lib)
  AOI211xp5_ASAP7_75t_SRAM(lib)
  AOI21x1_ASAP7_75t_SRAM(lib)
  AOI21xp33_ASAP7_75t_SRAM(lib)
  AOI21xp5_ASAP7_75t_SRAM(lib)
  AOI221x1_ASAP7_75t_SRAM(lib)
  AOI221xp5_ASAP7_75t_SRAM(lib)
  AOI222xp33_ASAP7_75t_SRAM(lib)
  AOI22x1_ASAP7_75t_SRAM(lib)
  AOI22xp33_ASAP7_75t_SRAM(lib)
  AOI22xp5_ASAP7_75t_SRAM(lib)
  AOI311xp33_ASAP7_75t_SRAM(lib)
  AOI31xp33_ASAP7_75t_SRAM(lib)
  AOI31xp67_ASAP7_75t_SRAM(lib)
  AOI321xp33_ASAP7_75t_SRAM(lib)
  AOI322xp5_ASAP7_75t_SRAM(lib)
  AOI32xp33_ASAP7_75t_SRAM(lib)
  AOI331xp33_ASAP7_75t_SRAM(lib)
  AOI332xp33_ASAP7_75t_SRAM(lib)
  AOI333xp33_ASAP7_75t_SRAM(lib)
  AOI33xp33_ASAP7_75t_SRAM(lib)
  BUFx10_ASAP7_6t_R(lib)
  BUFx12_ASAP7_6t_R(lib)
  BUFx12q_ASAP7_6t_R(lib)
  BUFx16q_ASAP7_6t_R(lib)
  BUFx24_ASAP7_6t_R(lib)
  BUFx2_ASAP7_6t_R(lib)
  BUFx3_ASAP7_6t_R(lib)
  BUFx4_ASAP7_6t_R(lib)
  BUFx4q_ASAP7_6t_R(lib)
  BUFx5_ASAP7_6t_R(lib)
  BUFx6q_ASAP7_6t_R(lib)
  BUFx8_ASAP7_6t_R(lib)
  HB1x1_ASAP7_6t_R(lib)
  HB2x1_ASAP7_6t_R(lib)
  HB3x1_ASAP7_6t_R(lib)
  HB4x1_ASAP7_6t_R(lib)
  INVx11_ASAP7_6t_R(lib)
  INVx13_ASAP7_6t_R(lib)
  INVx1_ASAP7_6t_R(lib)
  INVx2_ASAP7_6t_R(lib)
  INVx3_ASAP7_6t_R(lib)
  INVx4_ASAP7_6t_R(lib)
  INVx5_ASAP7_6t_R(lib)
  INVx6_ASAP7_6t_R(lib)
  INVx8_ASAP7_6t_R(lib)
  INVxp5_ASAP7_6t_R(lib)
  DFFARHQNx1_ASAP7_6t_R(lib)
  DFFASHQNx1_ASAP7_6t_R(lib)
  DFFASRHQNx1_ASAP7_6t_R(lib)
  DFFHQNx1_ASAP7_6t_R(lib)
  DFFHQNx2_ASAP7_6t_R(lib)
  DFFHQNx3_ASAP7_6t_R(lib)
  DFFHQx4_ASAP7_6t_R(lib)
  DFFLQNx1_ASAP7_6t_R(lib)
  DFFLQNx2_ASAP7_6t_R(lib)
  DFFLQNx3_ASAP7_6t_R(lib)
  DFFLQx4_ASAP7_6t_R(lib)
  DHLx1_ASAP7_6t_R(lib)
  DHLx2_ASAP7_6t_R(lib)
  DHLx3_ASAP7_6t_R(lib)
  DLLx1_ASAP7_6t_R(lib)
  DLLx2_ASAP7_6t_R(lib)
  DLLx3_ASAP7_6t_R(lib)
  ICGx10_ASAP7_6t_R(lib)
  ICGx12_ASAP7_6t_R(lib)
  ICGx1_ASAP7_6t_R(lib)
  ICGx2_ASAP7_6t_R(lib)
  ICGx3_ASAP7_6t_R(lib)
  ICGx4_ASAP7_6t_R(lib)
  ICGx5_ASAP7_6t_R(lib)
  ICGx8_ASAP7_6t_R(lib)
  SDFHx1_ASAP7_6t_R(lib)
  SDFHx2_ASAP7_6t_R(lib)
  SDFHx3_ASAP7_6t_R(lib)
  SDFHx4_ASAP7_6t_R(lib)
  SDFLx1_ASAP7_6t_R(lib)
  SDFLx2_ASAP7_6t_R(lib)
  SDFLx3_ASAP7_6t_R(lib)
  SDFLx4_ASAP7_6t_R(lib)
  srambank_64x4x34_6t122(lib)
  srambank_256x4x34_6t122(lib)
  AND2x2_ASAP7_6t_R(lib)
  AND2x4_ASAP7_6t_R(lib)
  AND2x6_ASAP7_6t_R(lib)
  AND3x1_ASAP7_6t_R(lib)
  AND3x2_ASAP7_6t_R(lib)
  AND3x4_ASAP7_6t_R(lib)
  AND4x1_ASAP7_6t_R(lib)
  AND4x2_ASAP7_6t_R(lib)
  AND5x1_ASAP7_6t_R(lib)
  AND5x2_ASAP7_6t_R(lib)
  FAxp33_ASAP7_6t_R(lib)
  HAxp5_ASAP7_6t_R(lib)
  MAJIxp5_ASAP7_6t_R(lib)
  MAJx1_ASAP7_6t_R(lib)
  MAJx2_ASAP7_6t_R(lib)
  MAJx3_ASAP7_6t_R(lib)
  NAND2x1_ASAP7_6t_R(lib)
  NAND2x1p5_ASAP7_6t_R(lib)
  NAND2x2_ASAP7_6t_R(lib)
  NAND2xp5R_ASAP7_6t_R(lib)
  NAND2xp5_ASAP7_6t_R(lib)
  NAND3x1_ASAP7_6t_R(lib)
  NAND3x2_ASAP7_6t_R(lib)
  NAND3xp33R_ASAP7_6t_R(lib)
  NAND3xp33_ASAP7_6t_R(lib)
  NAND4xp25R_ASAP7_6t_R(lib)
  NAND4xp25_ASAP7_6t_R(lib)
  NAND4xp75_ASAP7_6t_R(lib)
  NAND5xp2_ASAP7_6t_R(lib)
  NOR2x1_ASAP7_6t_R(lib)
  NOR2x2R_ASAP7_6t_R(lib)
  NOR2x2_ASAP7_6t_R(lib)
  NOR2xp5_ASAP7_6t_R(lib)
  NOR3x1_ASAP7_6t_R(lib)
  NOR3x1f_ASAP7_6t_R(lib)
  NOR3x2_ASAP7_6t_R(lib)
  NOR3xp33_ASAP7_6t_R(lib)
  NOR4x3f_ASAP7_6t_R(lib)
  NOR4xp25_ASAP7_6t_R(lib)
  NOR5x1f_ASAP7_6t_R(lib)
  NOR5xp2_ASAP7_6t_R(lib)
  OR2x2_ASAP7_6t_R(lib)
  OR2x3R_ASAP7_6t_R(lib)
  OR2x4_ASAP7_6t_R(lib)
  OR3x1_ASAP7_6t_R(lib)
  OR3x2_ASAP7_6t_R(lib)
  OR3x4_ASAP7_6t_R(lib)
  OR4x1_ASAP7_6t_R(lib)
  OR4x2_ASAP7_6t_R(lib)
  OR5x1_ASAP7_6t_R(lib)
  OR5x2_ASAP7_6t_R(lib)
  TIEHIxp5_ASAP7_6t_R(lib)
  TIELOxp5_ASAP7_6t_R(lib)
  XNOR2x2_ASAP7_6t_R(lib)
  XNOR2xp5_ASAP7_6t_R(lib)
  XNOR2xp5f_ASAP7_6t_R(lib)
  XOR2x2_ASAP7_6t_R(lib)
  XOR2xp5_ASAP7_6t_R(lib)
  XOR2xp5r_ASAP7_6t_R(lib)
  NAND5xp2R_ASAP7_6t_R(lib)
  O2A1O1Ixp33_ASAP7_75t_SRAM(lib)
  O2A1O1Ixp5_ASAP7_75t_SRAM(lib)
  OA211x2_ASAP7_75t_SRAM(lib)
  OA21x2_ASAP7_75t_SRAM(lib)
  OA221x2_ASAP7_75t_SRAM(lib)
  OA222x2_ASAP7_75t_SRAM(lib)
  OA22x2_ASAP7_75t_SRAM(lib)
  OA31x2_ASAP7_75t_SRAM(lib)
  OA331x1_ASAP7_75t_SRAM(lib)
  OA331x2_ASAP7_75t_SRAM(lib)
  OA332x1_ASAP7_75t_SRAM(lib)
  OA332x2_ASAP7_75t_SRAM(lib)
  OA333x1_ASAP7_75t_SRAM(lib)
  OA333x2_ASAP7_75t_SRAM(lib)
  OA33x2_ASAP7_75t_SRAM(lib)
  OAI211xp5_ASAP7_75t_SRAM(lib)
  OAI21x1_ASAP7_75t_SRAM(lib)
  OAI21xp33_ASAP7_75t_SRAM(lib)
  OAI21xp5_ASAP7_75t_SRAM(lib)
  OAI221xp5_ASAP7_75t_SRAM(lib)
  OAI222xp33_ASAP7_75t_SRAM(lib)
  OAI22x1_ASAP7_75t_SRAM(lib)
  OAI22xp33_ASAP7_75t_SRAM(lib)
  OAI22xp5_ASAP7_75t_SRAM(lib)
  OAI311xp33_ASAP7_75t_SRAM(lib)
  OAI31xp33_ASAP7_75t_SRAM(lib)
  OAI31xp67_ASAP7_75t_SRAM(lib)
  OAI321xp33_ASAP7_75t_SRAM(lib)
  OAI322xp33_ASAP7_75t_SRAM(lib)
  OAI32xp33_ASAP7_75t_SRAM(lib)
  OAI331xp33_ASAP7_75t_SRAM(lib)
  OAI332xp33_ASAP7_75t_SRAM(lib)
  OAI333xp33_ASAP7_75t_SRAM(lib)
  OAI33xp33_ASAP7_75t_SRAM(lib)
  srambank_64x4x64_6t122(lib)
  CKINVDCx10_ASAP7_6t_SRAM(lib)
  CKINVDCx11_ASAP7_6t_SRAM(lib)
  CKINVDCx12_ASAP7_6t_SRAM(lib)
  CKINVDCx14_ASAP7_6t_SRAM(lib)
  CKINVDCx16_ASAP7_6t_SRAM(lib)
  CKINVDCx20_ASAP7_6t_SRAM(lib)
  CKINVDCx5p5_ASAP7_6t_SRAM(lib)
  CKINVDCx6p5_ASAP7_6t_SRAM(lib)
  CKINVDCx8_ASAP7_6t_SRAM(lib)
  CKINVDCx9p5_ASAP7_6t_SRAM(lib)
  srambank_128x4x40_6t122(lib)
  srambank_64x4x48_6t122(lib)
  AND2x2_ASAP7_6t_SL(lib)
  AND2x4_ASAP7_6t_SL(lib)
  AND2x6_ASAP7_6t_SL(lib)
  AND3x1_ASAP7_6t_SL(lib)
  AND3x2_ASAP7_6t_SL(lib)
  AND3x4_ASAP7_6t_SL(lib)
  AND4x1_ASAP7_6t_SL(lib)
  AND4x2_ASAP7_6t_SL(lib)
  AND5x1_ASAP7_6t_SL(lib)
  AND5x2_ASAP7_6t_SL(lib)
  FAxp33_ASAP7_6t_SL(lib)
  HAxp5_ASAP7_6t_SL(lib)
  MAJIxp5_ASAP7_6t_SL(lib)
  MAJx1_ASAP7_6t_SL(lib)
  MAJx2_ASAP7_6t_SL(lib)
  MAJx3_ASAP7_6t_SL(lib)
  NAND2x1_ASAP7_6t_SL(lib)
  NAND2x1p5_ASAP7_6t_SL(lib)
  NAND2x2_ASAP7_6t_SL(lib)
  NAND2xp5R_ASAP7_6t_SL(lib)
  NAND2xp5_ASAP7_6t_SL(lib)
  NAND3x1_ASAP7_6t_SL(lib)
  NAND3x2_ASAP7_6t_SL(lib)
  NAND3xp33R_ASAP7_6t_SL(lib)
  NAND3xp33_ASAP7_6t_SL(lib)
  NAND4xp25R_ASAP7_6t_SL(lib)
  NAND4xp25_ASAP7_6t_SL(lib)
  NAND4xp75_ASAP7_6t_SL(lib)
  NAND5xp2_ASAP7_6t_SL(lib)
  NOR2x1_ASAP7_6t_SL(lib)
  NOR2x2R_ASAP7_6t_SL(lib)
  NOR2x2_ASAP7_6t_SL(lib)
  NOR2xp5_ASAP7_6t_SL(lib)
  NOR3x1_ASAP7_6t_SL(lib)
  NOR3x1f_ASAP7_6t_SL(lib)
  NOR3x2_ASAP7_6t_SL(lib)
  NOR3xp33_ASAP7_6t_SL(lib)
  NOR4x3f_ASAP7_6t_SL(lib)
  NOR4xp25_ASAP7_6t_SL(lib)
  NOR5x1f_ASAP7_6t_SL(lib)
  NOR5xp2_ASAP7_6t_SL(lib)
  OR2x2_ASAP7_6t_SL(lib)
  OR2x3R_ASAP7_6t_SL(lib)
  OR2x4_ASAP7_6t_SL(lib)
  OR3x1_ASAP7_6t_SL(lib)
  OR3x2_ASAP7_6t_SL(lib)
  OR3x4_ASAP7_6t_SL(lib)
  OR4x1_ASAP7_6t_SL(lib)
  OR4x2_ASAP7_6t_SL(lib)
  OR5x1_ASAP7_6t_SL(lib)
  OR5x2_ASAP7_6t_SL(lib)
  TIEHIxp5_ASAP7_6t_SL(lib)
  TIELOxp5_ASAP7_6t_SL(lib)
  XNOR2x2_ASAP7_6t_SL(lib)
  XNOR2xp5_ASAP7_6t_SL(lib)
  XNOR2xp5f_ASAP7_6t_SL(lib)
  XOR2x2_ASAP7_6t_SL(lib)
  XOR2xp5_ASAP7_6t_SL(lib)
  XOR2xp5r_ASAP7_6t_SL(lib)
  NAND5xp2R_ASAP7_6t_SL(lib)
  srambank_128x4x16_6t122(lib)
  srambank_256x4x80_6t122(lib)
  BUFx10_ASAP7_6t_SRAM(lib)
  BUFx12_ASAP7_6t_SRAM(lib)
  BUFx12q_ASAP7_6t_SRAM(lib)
  BUFx16q_ASAP7_6t_SRAM(lib)
  BUFx24_ASAP7_6t_SRAM(lib)
  BUFx2_ASAP7_6t_SRAM(lib)
  BUFx3_ASAP7_6t_SRAM(lib)
  BUFx4_ASAP7_6t_SRAM(lib)
  BUFx4q_ASAP7_6t_SRAM(lib)
  BUFx5_ASAP7_6t_SRAM(lib)
  BUFx6q_ASAP7_6t_SRAM(lib)
  BUFx8_ASAP7_6t_SRAM(lib)
  HB1x1_ASAP7_6t_SRAM(lib)
  HB2x1_ASAP7_6t_SRAM(lib)
  HB3x1_ASAP7_6t_SRAM(lib)
  HB4x1_ASAP7_6t_SRAM(lib)
  INVx11_ASAP7_6t_SRAM(lib)
  INVx13_ASAP7_6t_SRAM(lib)
  INVx1_ASAP7_6t_SRAM(lib)
  INVx2_ASAP7_6t_SRAM(lib)
  INVx3_ASAP7_6t_SRAM(lib)
  INVx4_ASAP7_6t_SRAM(lib)
  INVx5_ASAP7_6t_SRAM(lib)
  INVx6_ASAP7_6t_SRAM(lib)
  INVx8_ASAP7_6t_SRAM(lib)
  INVxp5_ASAP7_6t_SRAM(lib)
  srambank_64x4x40_6t122(lib)
  srambank_256x4x72_6t122(lib)
  CKINVDCx10_ASAP7_6t_R(lib)
  CKINVDCx11_ASAP7_6t_R(lib)
  CKINVDCx12_ASAP7_6t_R(lib)
  CKINVDCx14_ASAP7_6t_R(lib)
  CKINVDCx16_ASAP7_6t_R(lib)
  CKINVDCx20_ASAP7_6t_R(lib)
  CKINVDCx5p5_ASAP7_6t_R(lib)
  CKINVDCx6p5_ASAP7_6t_R(lib)
  CKINVDCx8_ASAP7_6t_R(lib)
  CKINVDCx9p5_ASAP7_6t_R(lib)
  BUFx10_ASAP7_75t_SL(lib)
  BUFx12_ASAP7_75t_SL(lib)
  BUFx12f_ASAP7_75t_SL(lib)
  BUFx16f_ASAP7_75t_SL(lib)
  BUFx24_ASAP7_75t_SL(lib)
  BUFx2_ASAP7_75t_SL(lib)
  BUFx3_ASAP7_75t_SL(lib)
  BUFx4_ASAP7_75t_SL(lib)
  BUFx4f_ASAP7_75t_SL(lib)
  BUFx5_ASAP7_75t_SL(lib)
  BUFx6f_ASAP7_75t_SL(lib)
  BUFx8_ASAP7_75t_SL(lib)
  CKINVDCx10_ASAP7_75t_SL(lib)
  CKINVDCx11_ASAP7_75t_SL(lib)
  CKINVDCx12_ASAP7_75t_SL(lib)
  CKINVDCx14_ASAP7_75t_SL(lib)
  CKINVDCx16_ASAP7_75t_SL(lib)
  CKINVDCx20_ASAP7_75t_SL(lib)
  CKINVDCx5p33_ASAP7_75t_SL(lib)
  CKINVDCx6p67_ASAP7_75t_SL(lib)
  CKINVDCx8_ASAP7_75t_SL(lib)
  CKINVDCx9p33_ASAP7_75t_SL(lib)
  HB1xp67_ASAP7_75t_SL(lib)
  HB2xp67_ASAP7_75t_SL(lib)
  HB3xp67_ASAP7_75t_SL(lib)
  HB4xp67_ASAP7_75t_SL(lib)
  INVx11_ASAP7_75t_SL(lib)
  INVx13_ASAP7_75t_SL(lib)
  INVx1_ASAP7_75t_SL(lib)
  INVx2_ASAP7_75t_SL(lib)
  INVx3_ASAP7_75t_SL(lib)
  INVx4_ASAP7_75t_SL(lib)
  INVx5_ASAP7_75t_SL(lib)
  INVx6_ASAP7_75t_SL(lib)
  INVx8_ASAP7_75t_SL(lib)
  INVxp33_ASAP7_75t_SL(lib)
  INVxp67_ASAP7_75t_SL(lib)
  A2O1A1Ixp33_ASAP7_6t_SRAM(lib)
  A2O1A1Ixp5_ASAP7_6t_SRAM(lib)
  A2O1A1O1Ixp33_ASAP7_6t_SRAM(lib)
  AO211x1_ASAP7_6t_SRAM(lib)
  AO211x2_ASAP7_6t_SRAM(lib)
  AO21x1_ASAP7_6t_SRAM(lib)
  AO21x2_ASAP7_6t_SRAM(lib)
  AO221x1_ASAP7_6t_SRAM(lib)
  AO221x2_ASAP7_6t_SRAM(lib)
  AO222x1_ASAP7_6t_SRAM(lib)
  AO222x2_ASAP7_6t_SRAM(lib)
  AO22x1_ASAP7_6t_SRAM(lib)
  AO22x2_ASAP7_6t_SRAM(lib)
  AO311x1_ASAP7_6t_SRAM(lib)
  AO311x2_ASAP7_6t_SRAM(lib)
  AO31x1_ASAP7_6t_SRAM(lib)
  AO31x2_ASAP7_6t_SRAM(lib)
  AO321x1_ASAP7_6t_SRAM(lib)
  AO321x2_ASAP7_6t_SRAM(lib)
  AO322x1_ASAP7_6t_SRAM(lib)
  AO322x2_ASAP7_6t_SRAM(lib)
  AO32x1_ASAP7_6t_SRAM(lib)
  AO32x2_ASAP7_6t_SRAM(lib)
  AO331x1_ASAP7_6t_SRAM(lib)
  AO331x2_ASAP7_6t_SRAM(lib)
  AO332x1_ASAP7_6t_SRAM(lib)
  AO332x2_ASAP7_6t_SRAM(lib)
  AO333x1_ASAP7_6t_SRAM(lib)
  AO333x2_ASAP7_6t_SRAM(lib)
  AO33x1_ASAP7_6t_SRAM(lib)
  AO33x2_ASAP7_6t_SRAM(lib)
  AOI211xp25_ASAP7_6t_SRAM(lib)
  AOI211xp5_ASAP7_6t_SRAM(lib)
  AOI21x1_ASAP7_6t_SRAM(lib)
  AOI21xp25_ASAP7_6t_SRAM(lib)
  AOI21xp5_ASAP7_6t_SRAM(lib)
  AOI221xp25_ASAP7_6t_SRAM(lib)
  AOI221xp5_ASAP7_6t_SRAM(lib)
  AOI222xp25_ASAP7_6t_SRAM(lib)
  AOI22xp25_ASAP7_6t_SRAM(lib)
  AOI22xp5_ASAP7_6t_SRAM(lib)
  AOI311xp33_ASAP7_6t_SRAM(lib)
  AOI31xp33_ASAP7_6t_SRAM(lib)
  AOI31xp67_ASAP7_6t_SRAM(lib)
  AOI321xp17_ASAP7_6t_SRAM(lib)
  AOI322xp17_ASAP7_6t_SRAM(lib)
  AOI32xp33_ASAP7_6t_SRAM(lib)
  AOI331xp17_ASAP7_6t_SRAM(lib)
  AOI332xp17_ASAP7_6t_SRAM(lib)
  AOI333xp17_ASAP7_6t_SRAM(lib)
  AOI33xp33_ASAP7_6t_SRAM(lib)
  BUFx10_ASAP7_6t_SL(lib)
  BUFx12_ASAP7_6t_SL(lib)
  BUFx12q_ASAP7_6t_SL(lib)
  BUFx16q_ASAP7_6t_SL(lib)
  BUFx24_ASAP7_6t_SL(lib)
  BUFx2_ASAP7_6t_SL(lib)
  BUFx3_ASAP7_6t_SL(lib)
  BUFx4_ASAP7_6t_SL(lib)
  BUFx4q_ASAP7_6t_SL(lib)
  BUFx5_ASAP7_6t_SL(lib)
  BUFx6q_ASAP7_6t_SL(lib)
  BUFx8_ASAP7_6t_SL(lib)
  HB1x1_ASAP7_6t_SL(lib)
  HB2x1_ASAP7_6t_SL(lib)
  HB3x1_ASAP7_6t_SL(lib)
  HB4x1_ASAP7_6t_SL(lib)
  INVx11_ASAP7_6t_SL(lib)
  INVx13_ASAP7_6t_SL(lib)
  INVx1_ASAP7_6t_SL(lib)
  INVx2_ASAP7_6t_SL(lib)
  INVx3_ASAP7_6t_SL(lib)
  INVx4_ASAP7_6t_SL(lib)
  INVx5_ASAP7_6t_SL(lib)
  INVx6_ASAP7_6t_SL(lib)
  INVx8_ASAP7_6t_SL(lib)
  INVxp5_ASAP7_6t_SL(lib)
