# SPDX-FileCopyrightText: 2024 The Naja authors <https://github.com/najaeda/naja/blob/main/AUTHORS>
#
# SPDX-License-Identifier: Apache-2.0

import logging
from najaeda import naja


def constructIBUF(lib):
    ibuf = naja.SNLDesign.createPrimitive(lib, "IBUF")
    i = naja.SNLScalarTerm.create(ibuf, naja.SNLTerm.Direction.Input, "I")
    o = naja.SNLScalarTerm.create(ibuf, naja.SNLTerm.Direction.Output, "O")
    ibuf.addCombinatorialArcs(i, o)


def constructOBUF(lib):
    obuf = naja.SNLDesign.createPrimitive(lib, "OBUF")
    i = naja.SNLScalarTerm.create(obuf, naja.SNLTerm.Direction.Input, "I")
    o = naja.SNLScalarTerm.create(obuf, naja.SNLTerm.Direction.Output, "O")
    obuf.addCombinatorialArcs(i, o)


def constructBUFG(lib):
    bufg = naja.SNLDesign.createPrimitive(lib, "BUFG")
    i = naja.SNLScalarTerm.create(bufg, naja.SNLTerm.Direction.Input, "I")
    o = naja.SNLScalarTerm.create(bufg, naja.SNLTerm.Direction.Output, "O")
    bufg.addCombinatorialArcs(i, o)


def constructDSP48E1(lib):
    dsp48e1 = naja.SNLDesign.createPrimitive(lib, "DSP48E1")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, 29, 0, "ACOUT")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, 17, 0, "BCOUT")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, "CARRYCASCOUT")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "MULTSIGNOUT")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 47, 0, "PCOUT")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, "OVERFLOW")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, "PATTERNBDETECT")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, "PATTERNDETECT")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, "UNDERFLOW")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, 3, 0, "CARRYOUT")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Output, 47, 0, "P")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 29, 0, "ACIN")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 17, 0, "BCIN")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CARRYCASCIN")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "MULTSIGNIN")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 47, 0, "PCIN")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 3, 0, "ALUMODE")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 2, 0, "CARRYINSEL")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CLK")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 4, 0, "INMODE")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 6, 0, "OPMODE")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 29, 0, "A")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 17, 0, "B")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 47, 0, "C")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CARRYIN")
    naja.SNLBusTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, 24, 0, "D")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEA1")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEA2")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEAD")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEALUMODE")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEB1")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEB2")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEC")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CECARRYIN")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CECTRL")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CED")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEINMODE")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEM")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "CEP")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTA")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTALLCARRYIN")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTALUMODE")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTB")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTC")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTCTRL")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTD")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTINMODE")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTM")
    naja.SNLScalarTerm.create(dsp48e1, naja.SNLTerm.Direction.Input, "RSTP")
    naja.SNLParameter.create_decimal(dsp48e1, "ACASCREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "ADREG", 1)
    naja.SNLParameter.create_string(dsp48e1, "A_INPUT", "DIRECT")
    naja.SNLParameter.create_decimal(dsp48e1, "ALUMODEREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "AREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "BCASCREG", 1)
    naja.SNLParameter.create_string(dsp48e1, "B_INPUT", "DIRECT")
    naja.SNLParameter.create_decimal(dsp48e1, "BREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "CARRYINREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "CARRYINSELREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "CREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "DREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "INMODEREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "MREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "OPMODEREG", 1)
    naja.SNLParameter.create_decimal(dsp48e1, "PREG", 1)
    naja.SNLParameter.create_boolean(dsp48e1, "USE_DPORT", False)
    naja.SNLParameter.create_string(dsp48e1, "USE_MULT", "MULTIPLY")
    naja.SNLParameter.create_string(dsp48e1, "USE_SIMD", "ONE48")


def constructINV(lib):
    inv = naja.SNLDesign.createPrimitive(lib, "INV")
    i = naja.SNLScalarTerm.create(inv, naja.SNLTerm.Direction.Input, "I")
    o = naja.SNLScalarTerm.create(inv, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs(i, o)


def constructCARRY4(lib):
    carry4 = naja.SNLDesign.createPrimitive(lib, "CARRY4")
    o = naja.SNLBusTerm.create(carry4, naja.SNLTerm.Direction.Output, 3, 0, "O")
    co = naja.SNLBusTerm.create(carry4, naja.SNLTerm.Direction.Output, 3, 0, "CO")
    di = naja.SNLBusTerm.create(carry4, naja.SNLTerm.Direction.Input, 3, 0, "DI")
    s = naja.SNLBusTerm.create(carry4, naja.SNLTerm.Direction.Input, 3, 0, "S")
    cyinit = naja.SNLScalarTerm.create(carry4, naja.SNLTerm.Direction.Input, "CYINIT")
    ci = naja.SNLScalarTerm.create(carry4, naja.SNLTerm.Direction.Input, "CI")
    o_bits = [b for b in o.getBits()]
    co_bits = [b for b in co.getBits()]
    di_bits = [b for b in di.getBits()]
    s_bits = [b for b in s.getBits()]
    # cyinit and ci are in combinatorial dependency with o and co outputs
    naja.SNLDesign.addCombinatorialArcs([cyinit, ci], [o, co])
    naja.SNLDesign.addCombinatorialArcs(s_bits[0], [o, co])
    naja.SNLDesign.addCombinatorialArcs(s_bits[1], [o_bits[1], o_bits[2], o_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(s_bits[1], [co_bits[1], co_bits[2], co_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(s_bits[2], [o_bits[2], o_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(s_bits[2], [co_bits[2], co_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(s_bits[3], o_bits[3])
    naja.SNLDesign.addCombinatorialArcs(s_bits[3], co_bits[3])
    naja.SNLDesign.addCombinatorialArcs(di_bits[0], [o_bits[1], o_bits[2], o_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(di_bits[0], co)
    naja.SNLDesign.addCombinatorialArcs(di_bits[1], [o_bits[2], o_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(di_bits[1], [co_bits[1], co_bits[2], co_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(di_bits[2], o_bits[3])
    naja.SNLDesign.addCombinatorialArcs(di_bits[2], [co_bits[2], co_bits[3]])
    naja.SNLDesign.addCombinatorialArcs(di_bits[3], co_bits[3])


def constructLUT1(lib):
    lut1 = naja.SNLDesign.createPrimitive(lib, "LUT1")
    i0 = naja.SNLScalarTerm.create(lut1, naja.SNLTerm.Direction.Input, "I0")
    o = naja.SNLScalarTerm.create(lut1, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs(i0, o)
    naja.SNLParameter.create_binary(lut1, "INIT", 2, 0b00)


def constructLUT2(lib):
    lut2 = naja.SNLDesign.createPrimitive(lib, "LUT2")
    i0 = naja.SNLScalarTerm.create(lut2, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(lut2, naja.SNLTerm.Direction.Input, "I1")
    o = naja.SNLScalarTerm.create(lut2, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs([i0, i1], o)
    naja.SNLParameter.create_binary(lut2, "INIT", 4, 0x0)


def constructLUT3(lib):
    lut3 = naja.SNLDesign.createPrimitive(lib, "LUT3")
    i0 = naja.SNLScalarTerm.create(lut3, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(lut3, naja.SNLTerm.Direction.Input, "I1")
    i2 = naja.SNLScalarTerm.create(lut3, naja.SNLTerm.Direction.Input, "I2")
    o = naja.SNLScalarTerm.create(lut3, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, i2], o)
    naja.SNLParameter.create_binary(lut3, "INIT", 8, 0x00)


def constructLUT4(lib):
    lut4 = naja.SNLDesign.createPrimitive(lib, "LUT4")
    i0 = naja.SNLScalarTerm.create(lut4, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(lut4, naja.SNLTerm.Direction.Input, "I1")
    i2 = naja.SNLScalarTerm.create(lut4, naja.SNLTerm.Direction.Input, "I2")
    i3 = naja.SNLScalarTerm.create(lut4, naja.SNLTerm.Direction.Input, "I3")
    o = naja.SNLScalarTerm.create(lut4, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, i2, i3], o)
    naja.SNLParameter.create_binary(lut4, "INIT", 16, 0x0000)


def constructLUT5(lib):
    lut5 = naja.SNLDesign.createPrimitive(lib, "LUT5")
    i0 = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Input, "I1")
    i2 = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Input, "I2")
    i3 = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Input, "I3")
    i4 = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Input, "I4")
    o = naja.SNLScalarTerm.create(lut5, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, i2, i3, i4], o)
    naja.SNLParameter.create_binary(lut5, "INIT", 32, 0x00000000)


def constructLUT6(lib):
    lut6 = naja.SNLDesign.createPrimitive(lib, "LUT6")
    i0 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I1")
    i2 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I2")
    i3 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I3")
    i4 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I4")
    i5 = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Input, "I5")
    o = naja.SNLScalarTerm.create(lut6, naja.SNLTerm.Direction.Output, "O")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, i2, i3, i4, i5], o)
    naja.SNLParameter.create_binary(lut6, "INIT", 64, 0x0000000000000000)


def constructMUXF7(lib):
    muxf7 = naja.SNLDesign.createPrimitive(lib, "MUXF7")
    i0 = naja.SNLScalarTerm.create(muxf7, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(muxf7, naja.SNLTerm.Direction.Input, "I1")
    o = naja.SNLScalarTerm.create(muxf7, naja.SNLTerm.Direction.Output, "O")
    s = naja.SNLScalarTerm.create(muxf7, naja.SNLTerm.Direction.Input, "S")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, s], o)


def constructMUXF8(lib):
    muxf8 = naja.SNLDesign.createPrimitive(lib, "MUXF8")
    i0 = naja.SNLScalarTerm.create(muxf8, naja.SNLTerm.Direction.Input, "I0")
    i1 = naja.SNLScalarTerm.create(muxf8, naja.SNLTerm.Direction.Input, "I1")
    o = naja.SNLScalarTerm.create(muxf8, naja.SNLTerm.Direction.Output, "O")
    s = naja.SNLScalarTerm.create(muxf8, naja.SNLTerm.Direction.Input, "S")
    naja.SNLDesign.addCombinatorialArcs([i0, i1, s], o)


def constructSRL16E(lib):
    srl16e = naja.SNLDesign.createPrimitive(lib, "SRL16E")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "CE")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "CLK")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "D")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Output, "Q")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "A0")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "A1")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "A2")
    naja.SNLScalarTerm.create(srl16e, naja.SNLTerm.Direction.Input, "A3")
    naja.SNLParameter.create_binary(srl16e, "INIT", 16, 0x0000)
    naja.SNLParameter.create_binary(srl16e, "IS_CLK_INVERTED", 1, 0)


def constructFDCE(lib):
    fdce = naja.SNLDesign.createPrimitive(lib, "FDCE")
    q = naja.SNLScalarTerm.create(fdce, naja.SNLTerm.Direction.Output, "Q")
    c = naja.SNLScalarTerm.create(fdce, naja.SNLTerm.Direction.Input, "C")
    ce = naja.SNLScalarTerm.create(fdce, naja.SNLTerm.Direction.Input, "CE")
    clr = naja.SNLScalarTerm.create(fdce, naja.SNLTerm.Direction.Input, "CLR")
    d = naja.SNLScalarTerm.create(fdce, naja.SNLTerm.Direction.Input, "D")
    naja.SNLParameter.create_binary(fdce, "INIT", 1, 0b0)
    naja.SNLDesign.addInputsToClockArcs([ce, clr, d], c)
    naja.SNLDesign.addClockToOutputsArcs(c, q)


def constructFDPE(lib):
    fdpe = naja.SNLDesign.createPrimitive(lib, "FDPE")
    q = naja.SNLScalarTerm.create(fdpe, naja.SNLTerm.Direction.Output, "Q")
    c = naja.SNLScalarTerm.create(fdpe, naja.SNLTerm.Direction.Input, "C")
    ce = naja.SNLScalarTerm.create(fdpe, naja.SNLTerm.Direction.Input, "CE")
    pre = naja.SNLScalarTerm.create(fdpe, naja.SNLTerm.Direction.Input, "PRE")
    d = naja.SNLScalarTerm.create(fdpe, naja.SNLTerm.Direction.Input, "D")
    naja.SNLParameter.create_binary(fdpe, "INIT", 1, 0b1)
    naja.SNLDesign.addInputsToClockArcs([ce, pre, d], c)
    naja.SNLDesign.addClockToOutputsArcs(c, q)


def constructFDRE(lib):
    fdre = naja.SNLDesign.createPrimitive(lib, "FDRE")
    q = naja.SNLScalarTerm.create(fdre, naja.SNLTerm.Direction.Output, "Q")
    c = naja.SNLScalarTerm.create(fdre, naja.SNLTerm.Direction.Input, "C")
    ce = naja.SNLScalarTerm.create(fdre, naja.SNLTerm.Direction.Input, "CE")
    r = naja.SNLScalarTerm.create(fdre, naja.SNLTerm.Direction.Input, "R")
    d = naja.SNLScalarTerm.create(fdre, naja.SNLTerm.Direction.Input, "D")
    naja.SNLParameter.create_binary(fdre, "INIT", 1, 0b0)
    naja.SNLDesign.addInputsToClockArcs([ce, r, d], c)
    naja.SNLDesign.addClockToOutputsArcs(c, q)


def constructFDSE(lib):
    fdse = naja.SNLDesign.createPrimitive(lib, "FDSE")
    q = naja.SNLScalarTerm.create(fdse, naja.SNLTerm.Direction.Output, "Q")
    c = naja.SNLScalarTerm.create(fdse, naja.SNLTerm.Direction.Input, "C")
    ce = naja.SNLScalarTerm.create(fdse, naja.SNLTerm.Direction.Input, "CE")
    s = naja.SNLScalarTerm.create(fdse, naja.SNLTerm.Direction.Input, "S")
    d = naja.SNLScalarTerm.create(fdse, naja.SNLTerm.Direction.Input, "D")
    naja.SNLParameter.create_binary(fdse, "INIT", 1, 0b0)
    naja.SNLDesign.addInputsToClockArcs([ce, s, d], c)
    naja.SNLDesign.addClockToOutputsArcs(c, q)


def constructRAM32M(lib):
    ram32m = naja.SNLDesign.createPrimitive(lib, "RAM32M")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Output, 1, 0, "DOA")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Output, 1, 0, "DOB")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Output, 1, 0, "DOC")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Output, 1, 0, "DOD")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 4, 0, "ADDRA")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 4, 0, "ADDRB")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 4, 0, "ADDRC")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 4, 0, "ADDRD")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 1, 0, "DIA")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 1, 0, "DIB")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 1, 0, "DIC")
    naja.SNLBusTerm.create(ram32m, naja.SNLTerm.Direction.Input, 1, 0, "DID")
    naja.SNLScalarTerm.create(ram32m, naja.SNLTerm.Direction.Input, "WCLK")
    naja.SNLScalarTerm.create(ram32m, naja.SNLTerm.Direction.Input, "WE")
    naja.SNLParameter.create_binary(ram32m, "INIT_A", 64, 0)
    naja.SNLParameter.create_binary(ram32m, "INIT_B", 64, 0)
    naja.SNLParameter.create_binary(ram32m, "INIT_C", 64, 0)
    naja.SNLParameter.create_binary(ram32m, "INIT_D", 64, 0)


def constructRAM64M(lib):
    ram64m = naja.SNLDesign.createPrimitive(lib, "RAM64M")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Output, "DOA")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Output, "DOB")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Output, "DOC")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Output, "DOD")
    naja.SNLBusTerm.create(ram64m, naja.SNLTerm.Direction.Input, 5, 0, "ADDRA")
    naja.SNLBusTerm.create(ram64m, naja.SNLTerm.Direction.Input, 5, 0, "ADDRB")
    naja.SNLBusTerm.create(ram64m, naja.SNLTerm.Direction.Input, 5, 0, "ADDRC")
    naja.SNLBusTerm.create(ram64m, naja.SNLTerm.Direction.Input, 5, 0, "ADDRD")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "DIA")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "DIB")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "DIC")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "DID")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "WCLK")
    naja.SNLScalarTerm.create(ram64m, naja.SNLTerm.Direction.Input, "WE")
    naja.SNLParameter.create_binary(ram64m, "INIT_A", 64, 0)
    naja.SNLParameter.create_binary(ram64m, "INIT_B", 64, 0)
    naja.SNLParameter.create_binary(ram64m, "INIT_C", 64, 0)
    naja.SNLParameter.create_binary(ram64m, "INIT_D", 64, 0)


def constructRAMB18E1(lib):
    ramb18e1 = naja.SNLDesign.createPrimitive(lib, "RAMB18E1")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 13, 0, "ADDRARDADDR")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 13, 0, "ADDRBWRADDR")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "CLKARDCLK")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "CLKBWRCLK")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 15, 0, "DIADI")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 15, 0, "DIBDI")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 1, 0, "DIPADIP")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 1, 0, "DIPBDIP")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Output, 15, 0, "DOADO")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Output, 15, 0, "DOBDO")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Output, 1, 0, "DOPADOP")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Output, 1, 0, "DOPBDOP")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "ENARDEN")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "ENBWREN")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "REGCEAREGCE")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "REGCEB")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "RSTRAMARSTRAM")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "RSTRAMB")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "RSTREGARSTREG")
    naja.SNLScalarTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, "RSTREGB")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 1, 0, "WEA")
    naja.SNLBusTerm.create(ramb18e1, naja.SNLTerm.Direction.Input, 3, 0, "WEBWE")
    naja.SNLParameter.create_decimal(ramb18e1, "DOA_REG", 0)
    naja.SNLParameter.create_decimal(ramb18e1, "DOB_REG", 0)
    naja.SNLParameter.create_binary(ramb18e1, "INIT_A", 18, 0x00000)
    naja.SNLParameter.create_binary(ramb18e1, "INIT_B", 18, 0x00000)
    for i in range(64):
        paramName = "INIT_" + hex(i)[2:].zfill(2).upper()
        naja.SNLParameter.create_binary(ramb18e1, paramName, 256, 0)
    for i in range(8):
        paramName = "INITP_" + hex(i)[2:].zfill(2).upper()
        naja.SNLParameter.create_binary(ramb18e1, paramName, 256, 0)
    naja.SNLParameter.create_string(ramb18e1, "RAM_MODE", "TDP")
    naja.SNLParameter.create_decimal(ramb18e1, "READ_WIDTH_A", 0)
    naja.SNLParameter.create_decimal(ramb18e1, "READ_WIDTH_B", 0)
    naja.SNLParameter.create_binary(ramb18e1, "SRVAL_A", 18, 0)
    naja.SNLParameter.create_binary(ramb18e1, "SRVAL_B", 18, 0)
    naja.SNLParameter.create_string(ramb18e1, "WRITE_MODE_A", "WRITE_FIRST")
    naja.SNLParameter.create_string(ramb18e1, "WRITE_MODE_B", "WRITE_FIRST")
    naja.SNLParameter.create_decimal(ramb18e1, "WRITE_WIDTH_A", 0)
    naja.SNLParameter.create_decimal(ramb18e1, "WRITE_WIDTH_B", 0)


def constructRAMB36E1(lib):
    ramb36e1 = naja.SNLDesign.createPrimitive(lib, "RAMB36E1")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 15, 0, "ADDRARDADDR")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 15, 0, "ADDRBWRADDR")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "CASCADEINA")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "CASCADEINB")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, "CASCADEOUTA")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, "CASCADEOUTB")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "CLKARDCLK")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "CLKBWRCLK")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, "DBITERR")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 31, 0, "DIADI")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 31, 0, "DIBDI")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 3, 0, "DIPADIP")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 3, 0, "DIPBDIP")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 31, 0, "DOADO")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 31, 0, "DOBDO")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 3, 0, "DOPADOP")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 3, 0, "DOPBDOP")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 7, 0, "ECCPARITY")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "ENARDEN")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "ENBWREN")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "INJECTDBITERR")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "INJECTSBITERR")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, 8, 0, "RDADDRECC")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "REGCEAREGCE")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "REGCEB")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "RSTRAMARSTRAM")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "RSTRAMB")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "RSTREGARSTREG")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, "RSTREGB")
    naja.SNLScalarTerm.create(ramb36e1, naja.SNLTerm.Direction.Output, "SBITERR")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 3, 0, "WEA")
    naja.SNLBusTerm.create(ramb36e1, naja.SNLTerm.Direction.Input, 7, 0, "WEBWE")

    naja.SNLParameter.create_decimal(ramb36e1, "DOA_REG", 0)
    naja.SNLParameter.create_decimal(ramb36e1, "DOB_REG", 0)
    naja.SNLParameter.create_binary(ramb36e1, "INIT_A", 36, 0)
    naja.SNLParameter.create_binary(ramb36e1, "INIT_B", 36, 0)
    for i in range(128):
        paramName = "INIT_" + hex(i)[2:].zfill(2).upper()
        naja.SNLParameter.create_binary(ramb36e1, paramName, 256, 0)
    naja.SNLParameter.create_string(ramb36e1, "RAM_EXTENSION_A", "NONE")
    naja.SNLParameter.create_string(ramb36e1, "RAM_EXTENSION_B", "NONE")
    for i in range(16):
        paramName = "INITP_" + hex(i)[2:].zfill(2).upper()
        naja.SNLParameter.create_binary(ramb36e1, paramName, 256, 0)
    naja.SNLParameter.create_string(ramb36e1, "RAM_MODE", "TDP")
    naja.SNLParameter.create_decimal(ramb36e1, "READ_WIDTH_A", 0)
    naja.SNLParameter.create_decimal(ramb36e1, "READ_WIDTH_B", 0)
    naja.SNLParameter.create_decimal(ramb36e1, "WRITE_WIDTH_A", 0)
    naja.SNLParameter.create_decimal(ramb36e1, "WRITE_WIDTH_B", 0)
    naja.SNLParameter.create_binary(ramb36e1, "SRVAL_A", 36, 0)
    naja.SNLParameter.create_binary(ramb36e1, "SRVAL_B", 36, 0)
    naja.SNLParameter.create_string(ramb36e1, "WRITE_MODE_A", "WRITE_FIRST")
    naja.SNLParameter.create_string(ramb36e1, "WRITE_MODE_B", "WRITE_FIRST")


def load(db):
    logging.info("Loading Xilinx primitives")
    lib = naja.NLLibrary.createPrimitives(db, "xilinx")
    constructIBUF(lib)
    constructOBUF(lib)
    constructBUFG(lib)
    constructDSP48E1(lib)
    constructINV(lib)
    constructCARRY4(lib)
    constructLUT1(lib)
    constructLUT2(lib)
    constructLUT3(lib)
    constructLUT4(lib)
    constructLUT5(lib)
    constructLUT6(lib)
    constructMUXF7(lib)
    constructMUXF8(lib)
    constructSRL16E(lib)
    constructFDCE(lib)
    constructFDPE(lib)
    constructFDRE(lib)
    constructFDSE(lib)
    constructRAM32M(lib)
    constructRAM64M(lib)
    constructRAMB18E1(lib)
    constructRAMB36E1(lib)
